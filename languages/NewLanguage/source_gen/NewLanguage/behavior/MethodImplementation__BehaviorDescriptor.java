package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class MethodImplementation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L, "NewLanguage.structure.MethodImplementation");

  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5811245382203252452L).languageId(0x9b92103b95ca8c0cL, 0xceab519525ea4f22L).build2(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getParameters_idb_il9pqOXj = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getParameters").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(208653575778946899L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2();
  public static final SMethod<Object> run_idb_il9pqOTB = new SMethodBuilder<Object>(new SJavaCompoundTypeImpl(Object.class)).name("run").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(208653575778946663L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<Scope> getScope_id52_Geb4QFgX = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5811245382203257917L).languageId(0x9b92103b95ca8c0cL, 0xceab519525ea4f22L).build2(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SContainmentLink.class, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getScope_id52_Geb4QDV$, getParameters_idb_il9pqOXj, run_idb_il9pqOTB, getScope_id52_Geb4QFgX);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull final SNode __thisNode__, SAbstractConcept kind, SNode child) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(new _FunctionTypes._return_P0_E0<Iterable<SNode>>() {
          public Iterable<SNode> invoke() {
            return new Iterable<SNode>() {
              public Iterator<SNode> iterator() {
                return new YieldingIterator<SNode>() {
                  private int __CP__ = 0;
                  protected boolean moveToNext() {
__loop__:
                    do {
__switch__:
                      switch (this.__CP__) {
                        case -1:
                          assert false : "Internal error";
                          return false;
                        case 2:
                          this._2__yield_os7ybe_a0a0a0a0a1a11_it = Sequence.fromIterable(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.funcDec$t0Dl), LINKS.parameters$NTzl)).iterator();
                        case 3:
                          if (!(this._2__yield_os7ybe_a0a0a0a0a1a11_it.hasNext())) {
                            this.__CP__ = 5;
                            break;
                          }
                          this._2__yield_os7ybe_a0a0a0a0a1a11 = this._2__yield_os7ybe_a0a0a0a0a1a11_it.next();
                          this.__CP__ = 4;
                          break;
                        case 6:
                          this.__CP__ = 3;
                          this.yield(_2__yield_os7ybe_a0a0a0a0a1a11);
                          return true;
                        case 5:
                          this.__CP__ = 1;
                          this.yield(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.thisVar$tK4T), CONCEPTS.IVariable$So));
                          return true;
                        case 0:
                          this.__CP__ = 2;
                          break;
                        case 4:
                          this.__CP__ = 6;
                          break;
                        default:
                          break __loop__;
                      }
                    } while (true);
                    return false;
                  }
                  private SNode _2__yield_os7ybe_a0a0a0a0a1a11;
                  private Iterator<SNode> _2__yield_os7ybe_a0a0a0a0a1a11_it;
                };
              }
            };
          }
        }.invoke()), __thisNode__, kind);
      case 1:
        return new EmptyScope();
      default:
        return null;
    }
  }
  /*package*/ static List<SNode> getParameters_idb_il9pqOXj(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.funcDec$t0Dl), LINKS.parameters$NTzl);
  }
  /*package*/ static Object run_idb_il9pqOTB(@NotNull SNode __thisNode__, Frame frame, EvaluatorEnvironment env) {
    try {
      StatementBlock__BehaviorDescriptor.run_id1lixMam2gZ0.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.body$wRGM), frame, env);
    } catch (StopException e) {
      return e.value;
    }

    throw new IllegalStateException("Function did not return");
  }
  /*package*/ static Scope getScope_id52_Geb4QFgX(@NotNull final SNode __thisNode__, SAbstractConcept kind, SContainmentLink link, int index) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(new _FunctionTypes._return_P0_E0<Iterable<SNode>>() {
          public Iterable<SNode> invoke() {
            return new Iterable<SNode>() {
              public Iterator<SNode> iterator() {
                return new YieldingIterator<SNode>() {
                  private int __CP__ = 0;
                  protected boolean moveToNext() {
__loop__:
                    do {
__switch__:
                      switch (this.__CP__) {
                        case -1:
                          assert false : "Internal error";
                          return false;
                        case 2:
                          this._2__yield_os7ybe_a0a0a0a0a1a41_it = Sequence.fromIterable(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.funcDec$t0Dl), LINKS.parameters$NTzl)).iterator();
                        case 3:
                          if (!(this._2__yield_os7ybe_a0a0a0a0a1a41_it.hasNext())) {
                            this.__CP__ = 5;
                            break;
                          }
                          this._2__yield_os7ybe_a0a0a0a0a1a41 = this._2__yield_os7ybe_a0a0a0a0a1a41_it.next();
                          this.__CP__ = 4;
                          break;
                        case 6:
                          this.__CP__ = 3;
                          this.yield(_2__yield_os7ybe_a0a0a0a0a1a41);
                          return true;
                        case 5:
                          this.__CP__ = 1;
                          this.yield(SNodeOperations.as(SLinkOperations.getTarget(__thisNode__, LINKS.thisVar$tK4T), CONCEPTS.IVariable$So));
                          return true;
                        case 0:
                          this.__CP__ = 2;
                          break;
                        case 4:
                          this.__CP__ = 6;
                          break;
                        default:
                          break __loop__;
                      }
                    } while (true);
                    return false;
                  }
                  private SNode _2__yield_os7ybe_a0a0a0a0a1a41;
                  private Iterator<SNode> _2__yield_os7ybe_a0a0a0a0a1a41_it;
                };
              }
            };
          }
        }.invoke()), __thisNode__, kind);
      case 1:
        return new EmptyScope();
      default:
        return null;
    }
  }

  /*package*/ MethodImplementation__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((List<SNode>) getParameters_idb_il9pqOXj(node));
      case 2:
        return (T) ((Object) run_idb_il9pqOTB(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]));
      case 3:
        return (T) ((Scope) getScope_id52_Geb4QFgX(node, (SAbstractConcept) parameters[0], (SContainmentLink) parameters[1], ((int) (Integer) parameters[2])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L)).seal();

  private static final class LINKS {
    /*package*/ static final SReferenceLink funcDec$t0Dl = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L, 0x69a8a294bce41cfaL, "funcDec");
    /*package*/ static final SContainmentLink parameters$NTzl = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L, 0x69a8a294bce40a81L, "parameters");
    /*package*/ static final SContainmentLink thisVar$tK4T = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L, 0x69a8a294bddf5e60L, "thisVar");
    /*package*/ static final SContainmentLink body$wRGM = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L, 0x69a8a294bce41d7bL, "body");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IVariable$So = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L, "NewLanguage.structure.IVariable");
  }
}
