package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class ValueAccess__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L, "NewLanguage.structure.ValueAccess");

  public static final SMethod<Object> computeImpl_idb_il9omHZr = new SMethodBuilder<Object>(new SJavaCompoundTypeImpl(Object.class)).name("computeImpl").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(208653575761092571L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<ExpressionResult> computeLImpl_idb_il9oY7IT = new SMethodBuilder<ExpressionResult>(new SJavaCompoundTypeImpl(ExpressionResult.class)).name("computeLImpl").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(208653575771421625L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(computeImpl_idb_il9omHZr, computeLImpl_idb_il9oY7IT);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Object computeImpl_idb_il9omHZr(@NotNull SNode __thisNode__, Frame frame, EvaluatorEnvironment env) {
    return LExpression__BehaviorDescriptor.computeLImpl_idb_il9oY7IT.invoke(__thisNode__, frame, env).get();
  }
  /*package*/ static ExpressionResult computeLImpl_idb_il9oY7IT(@NotNull SNode __thisNode__, final Frame frame, final EvaluatorEnvironment env) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(__thisNode__, LINKS.container$v_Jl)));
    switch (conceptIndex.index(cncpt)) {
      case 0:
        final List<Object> list = (List<Object>) Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.container$v_Jl), frame, env);
        final Integer index = as_4axzln_a0a1a0b0k(Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.key$vAdn), frame, env), Integer.class);
        final Object val2 = ListSequence.fromList(list).getElement(index);
        return new ExpressionResult() {
          @Override
          public Object get() {
            return val2;
          }

          @Override
          public void set(Object v) {
            ListSequence.fromList(list).setElement(index, v);
          }
        };
      case 1:
        final Object val = as_4axzln_a0a0a0b1a01(Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.container$v_Jl), frame, env), Map.class).getValue(Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.key$vAdn), frame, env));
        return new ExpressionResult() {
          @Override
          public Object get() {
            return val;
          }

          @Override
          public void set(Object v) {
            as_4axzln_a0a0a2a0a1a1b0k(Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.container$v_Jl), frame, env), Map.class).setValue(Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.key$vAdn), frame, env), v);
          }
        };
      default:
        return null;
    }
  }

  /*package*/ ValueAccess__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Object) computeImpl_idb_il9omHZr(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]));
      case 1:
        return (T) ((ExpressionResult) computeLImpl_idb_il9oY7IT(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a20L)).seal();
  private static <T> T as_4axzln_a0a1a0b0k(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_4axzln_a0a0a0b1a01(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_4axzln_a0a0a2a0a1a1b0k(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink container$v_Jl = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L, 0x69a8a294bef04927L, "container");
    /*package*/ static final SContainmentLink key$vAdn = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L, 0x69a8a294bef04929L, "key");
  }
}
