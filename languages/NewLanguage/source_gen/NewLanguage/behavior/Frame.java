package NewLanguage.behavior;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class Frame {
  private final Frame parent;
  private final Map<SNode, VariableHolder> map = MapSequence.fromMap(new HashMap<SNode, VariableHolder>());
  private final Callable localCallable;

  public static class VariableHolder {
    public Object value;
  }

  public Frame(Callable functionCallable) {
    this.localCallable = functionCallable;
    this.parent = null;
  }

  public Frame(Frame parent) {
    this.localCallable = null;
    this.parent = parent;
  }

  public Object get(SNode n) {
    if (MapSequence.fromMap(map).containsKey(n)) {
      return MapSequence.fromMap(map).get(n).value;
    }
    if (parent != null) {
      return parent.get(n);
    }
    return null;
  }
  public void set(SNode n, Object value) {
    if (MapSequence.fromMap(map).containsKey(n)) {
      MapSequence.fromMap(map).get(n).value = value;
    } else if (parent != null) {
      parent.set(n, value);
    }
  }

  public void declare(SNode n) {
    MapSequence.fromMap(map).put(n, new VariableHolder());
  }

  public Iterable<SNode> getNodes() {
    if (this.parent == null) {
      return MapSequence.fromMap(this.map).keySet();
    }
    return SetSequence.fromSet(MapSequence.fromMap(this.map).keySet()).concat(Sequence.fromIterable(this.parent.getNodes()));
  }

  public Callable getCallable() {
    Frame p = this;
    while (p.parent != null) {
      p = p.parent;
    }
    return p.localCallable;
  }
}
