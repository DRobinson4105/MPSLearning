package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myBreakStatement__BehaviorDescriptor = new BreakStatement__BehaviorDescriptor();
  private final BHDescriptor myContinueStatement__BehaviorDescriptor = new ContinueStatement__BehaviorDescriptor();
  private final BHDescriptor myPrintStatement__BehaviorDescriptor = new PrintStatement__BehaviorDescriptor();
  private final BHDescriptor myDataType__BehaviorDescriptor = new DataType__BehaviorDescriptor();
  private final BHDescriptor myIntType__BehaviorDescriptor = new IntType__BehaviorDescriptor();
  private final BHDescriptor myStringType__BehaviorDescriptor = new StringType__BehaviorDescriptor();
  private final BHDescriptor myStringLiteral__BehaviorDescriptor = new StringLiteral__BehaviorDescriptor();
  private final BHDescriptor myBoolType__BehaviorDescriptor = new BoolType__BehaviorDescriptor();
  private final BHDescriptor myBooleanLiteral__BehaviorDescriptor = new BooleanLiteral__BehaviorDescriptor();
  private final BHDescriptor myBE_PlusAssign__BehaviorDescriptor = new BE_PlusAssign__BehaviorDescriptor();
  private final BHDescriptor myBE_Assign__BehaviorDescriptor = new BE_Assign__BehaviorDescriptor();
  private final BHDescriptor myBE_ModifyAssign__BehaviorDescriptor = new BE_ModifyAssign__BehaviorDescriptor();
  private final BHDescriptor myBE_Compute__BehaviorDescriptor = new BE_Compute__BehaviorDescriptor();
  private final BHDescriptor myListLiteral__BehaviorDescriptor = new ListLiteral__BehaviorDescriptor();
  private final BHDescriptor myIncrementAfter__BehaviorDescriptor = new IncrementAfter__BehaviorDescriptor();
  private final BHDescriptor myIncrementBefore__BehaviorDescriptor = new IncrementBefore__BehaviorDescriptor();
  private final BHDescriptor myDecrementAfter__BehaviorDescriptor = new DecrementAfter__BehaviorDescriptor();
  private final BHDescriptor myDecrementBefore__BehaviorDescriptor = new DecrementBefore__BehaviorDescriptor();
  private final BHDescriptor myClosureLiteral__BehaviorDescriptor = new ClosureLiteral__BehaviorDescriptor();
  private final BHDescriptor myICallable__BehaviorDescriptor = new ICallable__BehaviorDescriptor();
  private final BHDescriptor myStructType__BehaviorDescriptor = new StructType__BehaviorDescriptor();
  private final BHDescriptor myStructDeclaration__BehaviorDescriptor = new StructDeclaration__BehaviorDescriptor();
  private final BHDescriptor myStructLiteral__BehaviorDescriptor = new StructLiteral__BehaviorDescriptor();
  private final BHDescriptor myIDotOperation__BehaviorDescriptor = new IDotOperation__BehaviorDescriptor();
  private final BHDescriptor myDotExpression__BehaviorDescriptor = new DotExpression__BehaviorDescriptor();
  private final BHDescriptor myFieldAccessor__BehaviorDescriptor = new FieldAccessor__BehaviorDescriptor();
  private final BHDescriptor myBE_MultiplyAssign__BehaviorDescriptor = new BE_MultiplyAssign__BehaviorDescriptor();
  private final BHDescriptor myBE_DivideAssign__BehaviorDescriptor = new BE_DivideAssign__BehaviorDescriptor();
  private final BHDescriptor myBE_MinusAssign__BehaviorDescriptor = new BE_MinusAssign__BehaviorDescriptor();
  private final BHDescriptor myForLoop__BehaviorDescriptor = new ForLoop__BehaviorDescriptor();
  private final BHDescriptor myElseStatement__BehaviorDescriptor = new ElseStatement__BehaviorDescriptor();
  private final BHDescriptor myElse__BehaviorDescriptor = new Else__BehaviorDescriptor();
  private final BHDescriptor myElseIf__BehaviorDescriptor = new ElseIf__BehaviorDescriptor();
  private final BHDescriptor myLabel__BehaviorDescriptor = new Label__BehaviorDescriptor();
  private final BHDescriptor myICanBeLabelled__BehaviorDescriptor = new ICanBeLabelled__BehaviorDescriptor();
  private final BHDescriptor myNestedBlock__BehaviorDescriptor = new NestedBlock__BehaviorDescriptor();
  private final BHDescriptor myTraitDeclaration__BehaviorDescriptor = new TraitDeclaration__BehaviorDescriptor();
  private final BHDescriptor myMethodAccessor__BehaviorDescriptor = new MethodAccessor__BehaviorDescriptor();
  private final BHDescriptor myTryStatement__BehaviorDescriptor = new TryStatement__BehaviorDescriptor();
  private final BHDescriptor myCatchStatement__BehaviorDescriptor = new CatchStatement__BehaviorDescriptor();
  private final BHDescriptor myCatchParameter__BehaviorDescriptor = new CatchParameter__BehaviorDescriptor();
  private final BHDescriptor myThrowStatement__BehaviorDescriptor = new ThrowStatement__BehaviorDescriptor();
  private final BHDescriptor myTraitType__BehaviorDescriptor = new TraitType__BehaviorDescriptor();
  private final BHDescriptor myExpression__BehaviorDescriptor = new Expression__BehaviorDescriptor();
  private final BHDescriptor myVarReference__BehaviorDescriptor = new VarReference__BehaviorDescriptor();
  private final BHDescriptor myStatement__BehaviorDescriptor = new Statement__BehaviorDescriptor();
  private final BHDescriptor myStatementBlock__BehaviorDescriptor = new StatementBlock__BehaviorDescriptor();
  private final BHDescriptor myFunction__BehaviorDescriptor = new Function__BehaviorDescriptor();
  private final BHDescriptor myFunctionCall__BehaviorDescriptor = new FunctionCall__BehaviorDescriptor();
  private final BHDescriptor myIfStatement__BehaviorDescriptor = new IfStatement__BehaviorDescriptor();
  private final BHDescriptor myReturnStatement__BehaviorDescriptor = new ReturnStatement__BehaviorDescriptor();
  private final BHDescriptor myTernary__BehaviorDescriptor = new Ternary__BehaviorDescriptor();
  private final BHDescriptor myExpressionStatement__BehaviorDescriptor = new ExpressionStatement__BehaviorDescriptor();
  private final BHDescriptor myWhileLoop__BehaviorDescriptor = new WhileLoop__BehaviorDescriptor();
  private final BHDescriptor myDoubleType__BehaviorDescriptor = new DoubleType__BehaviorDescriptor();
  private final BHDescriptor myDoubleLiteral__BehaviorDescriptor = new DoubleLiteral__BehaviorDescriptor();
  private final BHDescriptor myTypeCast__BehaviorDescriptor = new TypeCast__BehaviorDescriptor();
  private final BHDescriptor myVariableDeclaration__BehaviorDescriptor = new VariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDocument__BehaviorDescriptor = new Document__BehaviorDescriptor();
  private final BHDescriptor myIntegerLiteral__BehaviorDescriptor = new IntegerLiteral__BehaviorDescriptor();
  private final BHDescriptor myFunctionReference__BehaviorDescriptor = new FunctionReference__BehaviorDescriptor();
  private final BHDescriptor myMethodImplementation__BehaviorDescriptor = new MethodImplementation__BehaviorDescriptor();
  private final BHDescriptor myIHasCondition__BehaviorDescriptor = new IHasCondition__BehaviorDescriptor();
  private final BHDescriptor myIHasMethods__BehaviorDescriptor = new IHasMethods__BehaviorDescriptor();
  private final BHDescriptor myMapLiteral__BehaviorDescriptor = new MapLiteral__BehaviorDescriptor();
  private final BHDescriptor myValueAccess__BehaviorDescriptor = new ValueAccess__BehaviorDescriptor();
  private final BHDescriptor myNumType__BehaviorDescriptor = new NumType__BehaviorDescriptor();
  private final BHDescriptor myLExpression__BehaviorDescriptor = new LExpression__BehaviorDescriptor();
  private final BHDescriptor myComment__BehaviorDescriptor = new Comment__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBE_Assign__BehaviorDescriptor;
      case 1:
        return myBE_Compute__BehaviorDescriptor;
      case 2:
        return myBE_DivideAssign__BehaviorDescriptor;
      case 3:
        return myBE_MinusAssign__BehaviorDescriptor;
      case 4:
        return myBE_ModifyAssign__BehaviorDescriptor;
      case 5:
        return myBE_MultiplyAssign__BehaviorDescriptor;
      case 6:
        return myBE_PlusAssign__BehaviorDescriptor;
      case 7:
        return myBoolType__BehaviorDescriptor;
      case 8:
        return myBooleanLiteral__BehaviorDescriptor;
      case 9:
        return myBreakStatement__BehaviorDescriptor;
      case 10:
        return myCatchParameter__BehaviorDescriptor;
      case 11:
        return myCatchStatement__BehaviorDescriptor;
      case 12:
        return myClosureLiteral__BehaviorDescriptor;
      case 13:
        return myComment__BehaviorDescriptor;
      case 14:
        return myContinueStatement__BehaviorDescriptor;
      case 15:
        return myDataType__BehaviorDescriptor;
      case 16:
        return myDecrementAfter__BehaviorDescriptor;
      case 17:
        return myDecrementBefore__BehaviorDescriptor;
      case 18:
        return myDocument__BehaviorDescriptor;
      case 19:
        return myDotExpression__BehaviorDescriptor;
      case 20:
        return myDoubleLiteral__BehaviorDescriptor;
      case 21:
        return myDoubleType__BehaviorDescriptor;
      case 22:
        return myElse__BehaviorDescriptor;
      case 23:
        return myElseIf__BehaviorDescriptor;
      case 24:
        return myElseStatement__BehaviorDescriptor;
      case 25:
        return myExpression__BehaviorDescriptor;
      case 26:
        return myExpressionStatement__BehaviorDescriptor;
      case 27:
        return myFieldAccessor__BehaviorDescriptor;
      case 28:
        return myForLoop__BehaviorDescriptor;
      case 29:
        return myFunction__BehaviorDescriptor;
      case 30:
        return myFunctionCall__BehaviorDescriptor;
      case 31:
        return myFunctionReference__BehaviorDescriptor;
      case 32:
        return myICallable__BehaviorDescriptor;
      case 33:
        return myICanBeLabelled__BehaviorDescriptor;
      case 34:
        return myIDotOperation__BehaviorDescriptor;
      case 35:
        return myIHasCondition__BehaviorDescriptor;
      case 36:
        return myIHasMethods__BehaviorDescriptor;
      case 37:
        return myIfStatement__BehaviorDescriptor;
      case 38:
        return myIncrementAfter__BehaviorDescriptor;
      case 39:
        return myIncrementBefore__BehaviorDescriptor;
      case 40:
        return myIntType__BehaviorDescriptor;
      case 41:
        return myIntegerLiteral__BehaviorDescriptor;
      case 42:
        return myLExpression__BehaviorDescriptor;
      case 43:
        return myLabel__BehaviorDescriptor;
      case 44:
        return myListLiteral__BehaviorDescriptor;
      case 45:
        return myMapLiteral__BehaviorDescriptor;
      case 46:
        return myMethodAccessor__BehaviorDescriptor;
      case 47:
        return myMethodImplementation__BehaviorDescriptor;
      case 48:
        return myNestedBlock__BehaviorDescriptor;
      case 49:
        return myNumType__BehaviorDescriptor;
      case 50:
        return myPrintStatement__BehaviorDescriptor;
      case 51:
        return myReturnStatement__BehaviorDescriptor;
      case 52:
        return myStatement__BehaviorDescriptor;
      case 53:
        return myStatementBlock__BehaviorDescriptor;
      case 54:
        return myStringLiteral__BehaviorDescriptor;
      case 55:
        return myStringType__BehaviorDescriptor;
      case 56:
        return myStructDeclaration__BehaviorDescriptor;
      case 57:
        return myStructLiteral__BehaviorDescriptor;
      case 58:
        return myStructType__BehaviorDescriptor;
      case 59:
        return myTernary__BehaviorDescriptor;
      case 60:
        return myThrowStatement__BehaviorDescriptor;
      case 61:
        return myTraitDeclaration__BehaviorDescriptor;
      case 62:
        return myTraitType__BehaviorDescriptor;
      case 63:
        return myTryStatement__BehaviorDescriptor;
      case 64:
        return myTypeCast__BehaviorDescriptor;
      case 65:
        return myValueAccess__BehaviorDescriptor;
      case 66:
        return myVarReference__BehaviorDescriptor;
      case 67:
        return myVariableDeclaration__BehaviorDescriptor;
      case 68:
        return myWhileLoop__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fbL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebfL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ec0L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258ded016L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e6167L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c1a68b3bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e7ffeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf6L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c3a82aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a43c987fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a430a0a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b5732L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b672cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655f40f2L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465374cacL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bec93234L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646545f01eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c5d77dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a63L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b38b9de4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c01651b0L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258470741L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952585666a8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258565786L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465587e79L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b423c5ceL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a473fd97L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465610090L)).seal();
}
