package NewLanguage.behavior;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.typesystem.dependencies.InferenceMethod;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Objects;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class BiFunctions {

  public static Map<SAbstractConcept, List<Matcher>> matchersMap = MapSequence.fromMap(new HashMap<SAbstractConcept, List<Matcher>>());

  public static Matcher getMatcher(SConcept concept, final MatcherInput args) {
    return ListSequence.fromList(MapSequence.fromMap(matchersMap).get(concept)).findFirst(new IWhereFilter<Matcher>() {
      public boolean accept(Matcher it) {
        return it.matches(args);
      }
    });
  }

  static {
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_Plus$I5, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(args.leftType())), CONCEPTS.IntType$pQ) && SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(args.rightType())), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575763055232", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575763052813", true), (SNode) createIntType_kqbne_a0a0c0a0a0a0a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a0a5(bei.left(), Integer.class) + as_kqbne_a0a0a0a0e0a1b0a0a5_0(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957863555997", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957863556002", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a0a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) + Double.parseDouble(bei.right().toString());
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.StringType$io) || SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.StringType$io);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575765038198", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575765038203", true), (SNode) createStringType_kqbne_a0a0c0a2a0a0a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> bei.left() + "" + bei.right();
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_EqualTo$pe, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return true;
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
          {
            SNode _nodeToCheck_1029348928467 = node;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575769573679", 0, null);
            typeCheckingContext.createEquation((SNode) args.rightType(), (SNode) args.leftType(), true, _info_12389875345);
          }
        }
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766247081", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766247086", true), (SNode) createBoolType_kqbne_a0b0c0a0a0a1a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Objects.equals(bei.left(), bei.right());
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_GreaterThan$O4, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766725473", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766725478", true), (SNode) createBoolType_kqbne_a0a0c0a0a0a2a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a2a5_0(bei.left(), Integer.class) > as_kqbne_a0a0a0a0e0a1b0a2a5(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957866742540", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957866742545", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a2a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) > Double.parseDouble(bei.right().toString());
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_LessThan$OT, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766925416", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575766925421", true), (SNode) createBoolType_kqbne_a0a0c0a0a0a3a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a3a5(bei.left(), Integer.class) < as_kqbne_a0a0a0a0e0a1b0a3a5_0(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868622882", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868622887", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a3a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) < Double.parseDouble(bei.right().toString());
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_Minus$cc, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575767219616", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "208653575767219621", true), (SNode) createIntType_kqbne_a0a0c0a0a0a4a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a4a5(bei.left(), Integer.class) - as_kqbne_a0a0a0a0e0a1b0a4a5_0(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868645794", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868645799", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a4a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) - Double.parseDouble(bei.right().toString());
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_Multiply$9r, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "2409647083314024965", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "2409647083314024970", true), (SNode) createIntType_kqbne_a0a0c0a0a0a5a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a5a5(bei.left(), Integer.class) * as_kqbne_a0a0a0a0e0a1b0a5a5_0(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868667297", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868667302", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a5a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) * Double.parseDouble(bei.right().toString());
      }
    }));
    MapSequence.fromMap(matchersMap).put(CONCEPTS.BE_Divide$9U, ListSequence.fromListAndArray(new ArrayList<Matcher>(), new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ);
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "2409647083314038742", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "2409647083314038747", true), (SNode) createIntType_kqbne_a0a0c0a0a0a6a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> as_kqbne_a0a0a0a0e0a1b0a6a5(bei.left(), Integer.class) / as_kqbne_a0a0a0a0e0a1b0a6a5_0(bei.right(), Integer.class);
      }
    }, new Matcher() {
      @Override
      public boolean matches(MatcherInput args) {
        return (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.DoubleType$Lp) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.IntType$pQ)) || (SNodeOperations.isInstanceOf(args.leftType(), CONCEPTS.IntType$pQ) && SNodeOperations.isInstanceOf(args.rightType(), CONCEPTS.DoubleType$Lp));
      }

      @Override
      @InferenceMethod
      public void typeRule(final TypeCheckingContext typeCheckingContext, SNode node, MatcherInput args) {
        {
          SNode _nodeToCheck_1029348928467 = node;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868687264", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:f1ef97ea-4730-44cf-a9df-c266b78bbb0c(NewLanguage.behavior)", "4161913957868687269", true), (SNode) createDoubleType_kqbne_a0a0c0a1a0a6a5(), _info_12389875345);
        }
      }

      @Override
      public _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> computer(MatcherInput args) {
        return (BinaryExpressionImpl bei) -> Double.parseDouble(bei.left().toString()) / Double.parseDouble(bei.right().toString());
      }
    }));

  }
  private static SNode createIntType_kqbne_a0a0c0a0a0a0a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.IntType$pQ);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a0a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static SNode createStringType_kqbne_a0a0c0a2a0a0a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.StringType$io);
    return n0.getResult();
  }
  private static SNode createBoolType_kqbne_a0b0c0a0a0a1a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BoolType$wU);
    return n0.getResult();
  }
  private static SNode createBoolType_kqbne_a0a0c0a0a0a2a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BoolType$wU);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a2a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static SNode createBoolType_kqbne_a0a0c0a0a0a3a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.BoolType$wU);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a3a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static SNode createIntType_kqbne_a0a0c0a0a0a4a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.IntType$pQ);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a4a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static SNode createIntType_kqbne_a0a0c0a0a0a5a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.IntType$pQ);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a5a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static SNode createIntType_kqbne_a0a0c0a0a0a6a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.IntType$pQ);
    return n0.getResult();
  }
  private static SNode createDoubleType_kqbne_a0a0c0a1a0a6a5() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.DoubleType$Lp);
    return n0.getResult();
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a0a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a0a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a2a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a2a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a3a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a3a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a4a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a4a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a5a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a5a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a6a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_kqbne_a0a0a0a0e0a1b0a6a5_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BE_Plus$I5 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465531231L, "NewLanguage.structure.BE_Plus");
    /*package*/ static final SConcept IntType$pQ = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L, "NewLanguage.structure.IntType");
    /*package*/ static final SConcept DoubleType$Lp = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a430a0a3L, "NewLanguage.structure.DoubleType");
    /*package*/ static final SConcept StringType$io = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258565786L, "NewLanguage.structure.StringType");
    /*package*/ static final SConcept BE_EqualTo$pe = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556e14aL, "NewLanguage.structure.BE_EqualTo");
    /*package*/ static final SConcept BE_GreaterThan$O4 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556d9b9L, "NewLanguage.structure.BE_GreaterThan");
    /*package*/ static final SConcept BE_LessThan$OT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646554f88fL, "NewLanguage.structure.BE_LessThan");
    /*package*/ static final SConcept BE_Minus$cc = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258b72e22L, "NewLanguage.structure.BE_Minus");
    /*package*/ static final SConcept BE_Multiply$9r = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebcL, "NewLanguage.structure.BE_Multiply");
    /*package*/ static final SConcept BE_Divide$9U = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebdL, "NewLanguage.structure.BE_Divide");
    /*package*/ static final SConcept BoolType$wU = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652aL, "NewLanguage.structure.BoolType");
  }
}
