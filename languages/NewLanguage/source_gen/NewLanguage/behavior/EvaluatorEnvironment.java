package NewLanguage.behavior;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class EvaluatorEnvironment {
  private int count = 0;
  private final int limit;
  private final StringBuilder log = new StringBuilder();
  private static final Map<SNode, _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl>> storedFunctions = MapSequence.fromMap(new HashMap<SNode, _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl>>());
  private static final Map<SNode, List<SNode>> storedEnclosedVariables = MapSequence.fromMap(new HashMap<SNode, List<SNode>>());
  public EvaluatorEnvironment(int limit) {
    this.limit = limit;
  }

  public void addToLog(Object message) {
    log.append("\n" + message.toString());
  }

  public String getLog() {
    return "Log:" + log.toString();
  }
  public void increment() {
    if (++count > limit) {
      throw new BudgetException();
    }
  }
  public static _FunctionTypes._return_P1_E0<? extends Object, ? super BinaryExpressionImpl> getFunction(SNode node, SConcept concept) {
    MatcherInput inp = new MatcherInput(SLinkOperations.getTarget(node, LINKS.left$sDis), SNodeOperations.as(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(node, LINKS.left$sDis)), CONCEPTS.DataType$aP), SLinkOperations.getTarget(node, LINKS.right$jytp), SNodeOperations.as(TypecheckingFacade.getFromContext().getTypeOf(SLinkOperations.getTarget(node, LINKS.right$jytp)), CONCEPTS.DataType$aP));

    if (!(MapSequence.fromMap(storedFunctions).containsKey(node))) {
      Matcher matcher = BiFunctions.getMatcher(concept, inp);
      MapSequence.fromMap(storedFunctions).put(node, matcher.computer(inp));
    }

    return MapSequence.fromMap(storedFunctions).get(node);
  }
  public static List<SNode> getEnclosedVariables(final SNode node) {
    if (!(MapSequence.fromMap(storedEnclosedVariables).containsKey(node))) {
      MapSequence.fromMap(storedEnclosedVariables).put(node, Sequence.fromIterable(SLinkOperations.collect(SNodeOperations.getNodeDescendants(node, CONCEPTS.VarReference$Jg, false, new SAbstractConcept[]{}), LINKS.var$iTQl)).distinct().where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(ListSequence.fromList(SNodeOperations.getNodeAncestors(it, null, false)).contains(node));
        }
      }).toListSequence());
    }

    return MapSequence.fromMap(storedEnclosedVariables).get(node);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$sDis = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L, 0x69a8a294c0675f0bL, "left");
    /*package*/ static final SContainmentLink right$jytp = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L, 0x2f07de6465546b29L, "right");
    /*package*/ static final SReferenceLink var$iTQl = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L, 0x2f07de64652aa794L, "var");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataType$aP = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL, "NewLanguage.structure.DataType");
    /*package*/ static final SConcept VarReference$Jg = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L, "NewLanguage.structure.VarReference");
  }
}
