package NewLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.typechecking.TypecheckingFacade;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class Struct {
  private SNode node;
  private Map<SNode, Object> fieldValues = MapSequence.fromMap(new HashMap<SNode, Object>());

  public Struct(SNode node, List<Object> values) {
    this.node = node;
    {
      Iterator<SNode> field_it = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.fields$lX8l)).iterator();
      Iterator<Object> value_it = ListSequence.fromList(values).iterator();
      SNode field_var;
      Object value_var;
      while (field_it.hasNext() && value_it.hasNext()) {
        field_var = field_it.next();
        value_var = value_it.next();
        MapSequence.fromMap(fieldValues).put(field_var, value_var);
      }
    }
  }

  public Object getFieldValue(SNode node) {
    return MapSequence.fromMap(fieldValues).get(node);
  }

  public void setFieldValue(SNode node, Object value) {
    MapSequence.fromMap(fieldValues).put(node, value);
  }

  public SNode getNode() {
    return this.node;
  }

  public Set<SNode> getTraits() {
    return (Set<SNode>) TraitDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiXbsSp.invoke(SNodeOperations.asSConcept(CONCEPTS.TraitDeclaration$N5), SLinkOperations.collect(SLinkOperations.getChildren(this.node, LINKS.traits$FwMg), LINKS.trait$AxyP));
  }

  public boolean extendsTrait(SNode inputTrait) {
    for (SNode trait : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.traits$FwMg))) {
      if (Objects.equals(TypecheckingFacade.getFromContext().getTypeOf(inputTrait), TypecheckingFacade.getFromContext().getTypeOf(trait))) {
        return true;
      }
    }

    return false;
  }

  @Override
  public String toString() {
    return fieldValues + "";
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink fields$lX8l = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L, 0x2170c9416229bf85L, "fields");
    /*package*/ static final SContainmentLink traits$FwMg = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L, 0x69a8a294bd2eafb9L, "traits");
    /*package*/ static final SReferenceLink trait$AxyP = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L, 0x69a8a294bd25a4f9L, "trait");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TraitDeclaration$N5 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, "NewLanguage.structure.TraitDeclaration");
  }
}
