package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.core.behavior.ScopeProvider__BehaviorDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class ForLoop__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L, "NewLanguage.structure.ForLoop");

  public static final SMethod<Void> runB_id1lixMam2fw2 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("runB").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1536439005502568450L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<List<SNode>> getVariableDeclarations_id25KMk5z1toL = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getVariableDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2409647083314599473L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getVariableDeclarations_id25KMk5z1tpL = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getVariableDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2409647083314599537L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5811245382203252452L).languageId(0x9b92103b95ca8c0cL, 0xceab519525ea4f22L).build2(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Scope> getScope_id52_Geb4QFgX = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5811245382203257917L).languageId(0x9b92103b95ca8c0cL, 0xceab519525ea4f22L).build2(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SContainmentLink.class, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(runB_id1lixMam2fw2, getVariableDeclarations_id25KMk5z1toL, getVariableDeclarations_id25KMk5z1tpL, getScope_id52_Geb4QDV$, getScope_id52_Geb4QFgX);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void runB_id1lixMam2fw2(@NotNull SNode __thisNode__, Frame frame, EvaluatorEnvironment env) {
    Frame loopFrame = new Frame(frame);
    for (SNode init : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.initialization$rgZv))) {
      Statement__BehaviorDescriptor.run_id1lixMam2fvA.invoke(init, loopFrame, env);
    }
    while (((boolean) IHasCondition__BehaviorDescriptor.computeCondition_id6ACCDiXzUcQ.invoke(__thisNode__, frame, env))) {
      try {
        StatementBlock__BehaviorDescriptor.run_id1lixMam2gZ0.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.body$ro1X), loopFrame, env);
      } catch (LocalControlFlowJump e) {
        if (Objects.equals(e.labelStatement, __thisNode__)) {
          if (e.isBreak) {
            return;
          }
        } else {
          throw e;
        }
      }
      for (SNode update : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.updates$rn5T))) {
        Expression__BehaviorDescriptor.compute_idb_il9omFIS.invoke(update, loopFrame, env);
      }
    }
  }
  /*package*/ static List<SNode> getVariableDeclarations_id25KMk5z1toL(@NotNull SNode __thisNode__, SNode child) {
    List<SNode> result = new ArrayList<SNode>();

    SNode childStatement = child;
    while (childStatement != null && SNodeOperations.getParent(childStatement) != __thisNode__) {
      childStatement = SNodeOperations.getParent(childStatement);
    }

    for (SNode statement : SLinkOperations.getChildren(__thisNode__, LINKS.initialization$rgZv)) {
      if (childStatement == statement) {
        break;
      }
      if (SNodeOperations.isInstanceOf(statement, CONCEPTS.VariableDeclaration$$0)) {
        ListSequence.fromList(result).addElement(SNodeOperations.as(statement, CONCEPTS.IVariable$So));
      }
    }

    return result;
  }
  /*package*/ static List<SNode> getVariableDeclarations_id25KMk5z1tpL(@NotNull SNode __thisNode__, int index) {
    List<SNode> result = new ArrayList<SNode>();

    for (int i = 0; i < index; i++) {
      if (SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.initialization$rgZv)).getElement(i), CONCEPTS.VariableDeclaration$$0)) {
        ListSequence.fromList(result).addElement(SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.initialization$rgZv)).getElement(i), CONCEPTS.IVariable$So));
      }
    }

    return result;
  }
  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(ForLoop__BehaviorDescriptor.getVariableDeclarations_id25KMk5z1toL.invoke(__thisNode__, child)), __thisNode__, kind);
      case 1:
        return CompositeWithParentScope.from(SLinkOperations.getTarget(__thisNode__, LINKS.label$QkRz), __thisNode__, kind);
      default:
    }
    return ScopeProvider__BehaviorDescriptor.getScope_id52_Geb4QDV$.invoke0(__thisNode__, CONCEPTS.ICanBeLabelled$74, kind, child);
  }
  /*package*/ static Scope getScope_id52_Geb4QFgX(@NotNull SNode __thisNode__, SAbstractConcept kind, SContainmentLink link, int index) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(ForLoop__BehaviorDescriptor.getVariableDeclarations_id25KMk5z1tpL.invoke(__thisNode__, ((int) index))), __thisNode__, kind);
      default:
    }
    return ScopeProvider__BehaviorDescriptor.getScope_id52_Geb4QFgX.invoke0(__thisNode__, CONCEPTS.ICanBeLabelled$74, kind, link, ((int) index));
  }

  /*package*/ ForLoop__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        runB_id1lixMam2fw2(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]);
        return null;
      case 1:
        return (T) ((List<SNode>) getVariableDeclarations_id25KMk5z1toL(node, (SNode) parameters[0]));
      case 2:
        return (T) ((List<SNode>) getVariableDeclarations_id25KMk5z1tpL(node, ((int) (Integer) parameters[0])));
      case 3:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      case 4:
        return (T) ((Scope) getScope_id52_Geb4QFgX(node, (SAbstractConcept) parameters[0], (SContainmentLink) parameters[1], ((int) (Integer) parameters[2])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L)).seal();

  private static final class LINKS {
    /*package*/ static final SContainmentLink initialization$rgZv = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L, 0x2170c94163021183L, "initialization");
    /*package*/ static final SContainmentLink body$ro1X = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L, 0x2170c9416302118cL, "body");
    /*package*/ static final SContainmentLink updates$rn5T = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L, 0x2170c94163021188L, "updates");
    /*package*/ static final SContainmentLink label$QkRz = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL, 0x2bfa9913b37aa7cdL, "label");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IVariable$So = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L, "NewLanguage.structure.IVariable");
    /*package*/ static final SConcept VariableDeclaration$$0 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL, "NewLanguage.structure.VariableDeclaration");
    /*package*/ static final SInterfaceConcept ICanBeLabelled$74 = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL, "NewLanguage.structure.ICanBeLabelled");
  }
}
