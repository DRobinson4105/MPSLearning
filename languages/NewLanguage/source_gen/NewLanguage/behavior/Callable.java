package NewLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.List;
import java.util.Iterator;

public class Callable {
  private SNode node;
  private Map<SNode, Object> map = MapSequence.fromMap(new HashMap<SNode, Object>());
  public Callable(SNode node, Frame frame, EvaluatorEnvironment env, Map<SNode, Object> included) {
    this.node = node;
    for (SNode var : ListSequence.fromList(env.getEnclosedVariables(node))) {
      MapSequence.fromMap(map).put(var, frame.get(var));
    }
    for (IMapping<SNode, Object> pair : MapSequence.fromMap(included)) {
      MapSequence.fromMap(map).put(pair.key(), pair.value());
    }
  }
  /*package*/ Object run(List<Object> args, EvaluatorEnvironment env) {
    Frame frame = new Frame(this);
    for (IMapping<SNode, Object> var : MapSequence.fromMap(map)) {
      frame.declare(var.key());
      frame.set(var.key(), var.value());
    }
    {
      Iterator<SNode> param_it = ListSequence.fromList(ICallable__BehaviorDescriptor.getParameters_idb_il9pqOXj.invoke(node)).iterator();
      Iterator<Object> arg_it = ListSequence.fromList(args).iterator();
      SNode param_var;
      Object arg_var;
      while (param_it.hasNext() && arg_it.hasNext()) {
        param_var = param_it.next();
        arg_var = arg_it.next();
        frame.declare(param_var);
        frame.set(param_var, arg_var);
      }
    }
    return ICallable__BehaviorDescriptor.run_idb_il9pqOTB.invoke(node, frame, env);
  }

  @Override
  public String toString() {
    return node.getNodeId() + "" + map;
  }
}
