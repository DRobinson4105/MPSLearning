package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Set;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import java.util.LinkedList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class TraitDeclaration__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, "NewLanguage.structure.TraitDeclaration");

  public static final SMethod<List<SNode>> getMethodDeclarations_id6ACCDiYPVHu = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getMethodDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7613513929810492254L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2();
  public static final SMethod<Set<SNode>> getAllSuperTraits_id6ACCDiX9mcX = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAllSuperTraits").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7613513929782027069L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2();
  public static final SMethod<Set<SNode>> getAllSuperTraits_id6ACCDiXbsSp = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAllSuperTraits").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7613513929782578713L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2(SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getAllSuperTypes_id6ACCDiZifQ2 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getAllSuperTypes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7613513929817914754L).languageId(0xa787f3eac6fef3beL, 0x80fd2975f5c34fe6L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getMethodDeclarations_id6ACCDiYPVHu, getAllSuperTraits_id6ACCDiX9mcX, getAllSuperTraits_id6ACCDiXbsSp, getAllSuperTypes_id6ACCDiZifQ2);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> getMethodDeclarations_id6ACCDiYPVHu(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(Sequence.fromIterable(SLinkOperations.collectMany(TraitDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiX9mcX.invoke(__thisNode__), LINKS.methodDeclarations$ZsGT)).toListSequence()).addSequence(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.methodDeclarations$ZsGT)));
  }
  /*package*/ static Set<SNode> getAllSuperTraits_id6ACCDiX9mcX(@NotNull SNode __thisNode__) {
    return (Set<SNode>) TraitDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiXbsSp.invoke(SNodeOperations.asSConcept(CONCEPTS.TraitDeclaration$N5), SLinkOperations.collect(SLinkOperations.getChildren(__thisNode__, LINKS.parentTraits$7MES), LINKS.trait$AxyP));
  }
  /*package*/ static Set<SNode> getAllSuperTraits_id6ACCDiXbsSp(@NotNull SAbstractConcept __thisConcept__, Iterable<SNode> initial) {
    Set<SNode> visited = SetSequence.fromSet(new HashSet<SNode>());
    Queue<SNode> toVisit = QueueSequence.fromQueue(new LinkedList<SNode>());
    QueueSequence.fromQueue(toVisit).addSequence(Sequence.fromIterable(initial));
    while (QueueSequence.fromQueue(toVisit).isNotEmpty()) {
      SNode next = QueueSequence.fromQueue(toVisit).removeFirstElement();
      if (SetSequence.fromSet(visited).contains(next)) {
        continue;
      }
      SetSequence.fromSet(visited).addElement(next);
      QueueSequence.fromQueue(toVisit).addSequence(Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(next, LINKS.parentTraits$7MES), LINKS.trait$AxyP)));
    }
    return visited;
  }
  /*package*/ static List<SNode> getAllSuperTypes_id6ACCDiZifQ2(@NotNull SNode __thisNode__) {
    return SetSequence.fromSet(TraitDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiX9mcX.invoke(__thisNode__)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.as(TypecheckingFacade.getFromContext().getTypeOf(it), CONCEPTS.DataType$aP);
      }
    }).toListSequence();
  }

  /*package*/ TraitDeclaration__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) getMethodDeclarations_id6ACCDiYPVHu(node));
      case 1:
        return (T) ((Set<SNode>) getAllSuperTraits_id6ACCDiX9mcX(node));
      case 3:
        return (T) ((List<SNode>) getAllSuperTypes_id6ACCDiZifQ2(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 2:
        return (T) ((Set<SNode>) getAllSuperTraits_id6ACCDiXbsSp(concept, (Iterable<SNode>) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink methodDeclarations$ZsGT = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, 0x2bfa9913b4017065L, "methodDeclarations");
    /*package*/ static final SContainmentLink parentTraits$7MES = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, 0x69a8a294bd25a500L, "parentTraits");
    /*package*/ static final SReferenceLink trait$AxyP = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L, 0x69a8a294bd25a4f9L, "trait");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TraitDeclaration$N5 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, "NewLanguage.structure.TraitDeclaration");
    /*package*/ static final SConcept DataType$aP = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL, "NewLanguage.structure.DataType");
  }
}
