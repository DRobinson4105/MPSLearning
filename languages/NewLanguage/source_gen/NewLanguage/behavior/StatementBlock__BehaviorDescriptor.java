package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class StatementBlock__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L, "NewLanguage.structure.StatementBlock");

  public static final SMethod<Void> run_id1lixMam2gZ0 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("run").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1lixMam2gZ0").build(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<List<SNode>> getVariableDeclarations_idb_il9oPJHX = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getVariableDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("b_il9oPJHX").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getVariableDeclarations_idb_il9oPJJa = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getVariableDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("b_il9oPJJa").build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("52_Geb4QDV$").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Scope> getScope_id52_Geb4QFgX = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("52_Geb4QFgX").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SContainmentLink.class, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(run_id1lixMam2gZ0, getVariableDeclarations_idb_il9oPJHX, getVariableDeclarations_idb_il9oPJJa, getScope_id52_Geb4QDV$, getScope_id52_Geb4QFgX);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void run_id1lixMam2gZ0(@NotNull SNode __thisNode__, Frame frame, EvaluatorEnvironment env) {
    env.increment();
    for (SNode node : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.statements$4ClP))) {
      Statement__BehaviorDescriptor.run_id1lixMam2fvA.invoke(node, frame, env);
    }
  }
  /*package*/ static List<SNode> getVariableDeclarations_idb_il9oPJHX(@NotNull SNode __thisNode__, SNode child) {
    List<SNode> result = new ArrayList<SNode>();

    SNode childStatement = child;
    while (childStatement != null && SNodeOperations.getParent(childStatement) != __thisNode__) {
      childStatement = SNodeOperations.getParent(childStatement);
    }

    for (SNode statement : SLinkOperations.getChildren(__thisNode__, LINKS.statements$4ClP)) {
      if (childStatement == statement) {
        break;
      }
      if (SNodeOperations.isInstanceOf(statement, CONCEPTS.VariableDeclaration$$0)) {
        ListSequence.fromList(result).addElement(SNodeOperations.as(statement, CONCEPTS.IVariable$So));
      }
    }

    return result;
  }
  /*package*/ static List<SNode> getVariableDeclarations_idb_il9oPJJa(@NotNull SNode __thisNode__, int index) {
    List<SNode> result = new ArrayList<SNode>();

    for (int i = 0; i < index; i++) {
      if (SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.statements$4ClP)).getElement(i), CONCEPTS.VariableDeclaration$$0)) {
        ListSequence.fromList(result).addElement(SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.statements$4ClP)).getElement(i), CONCEPTS.IVariable$So));
      }
    }

    return result;
  }
  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(StatementBlock__BehaviorDescriptor.getVariableDeclarations_idb_il9oPJHX.invoke(__thisNode__, child)), __thisNode__, kind);
      default:
        return null;
    }
  }
  /*package*/ static Scope getScope_id52_Geb4QFgX(@NotNull SNode __thisNode__, SAbstractConcept kind, SContainmentLink link, int index) {
    SAbstractConcept cncpt = kind;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return CompositeWithParentScope.from(ListScope.forNamedElements(StatementBlock__BehaviorDescriptor.getVariableDeclarations_idb_il9oPJJa.invoke(__thisNode__, ((int) index))), __thisNode__, kind);
      default:
        return null;
    }
  }

  /*package*/ StatementBlock__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        run_id1lixMam2gZ0(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]);
        return null;
      case 1:
        return (T) ((List<SNode>) getVariableDeclarations_idb_il9oPJHX(node, (SNode) parameters[0]));
      case 2:
        return (T) ((List<SNode>) getVariableDeclarations_idb_il9oPJJa(node, ((int) (Integer) parameters[0])));
      case 3:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      case 4:
        return (T) ((Scope) getScope_id52_Geb4QFgX(node, (SAbstractConcept) parameters[0], (SContainmentLink) parameters[1], ((int) (Integer) parameters[2])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L)).seal();

  private static final class LINKS {
    /*package*/ static final SContainmentLink statements$4ClP = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L, 0x2f07de64652e4563L, "statements");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IVariable$So = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L, "NewLanguage.structure.IVariable");
    /*package*/ static final SConcept VariableDeclaration$$0 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL, "NewLanguage.structure.VariableDeclaration");
  }
}
