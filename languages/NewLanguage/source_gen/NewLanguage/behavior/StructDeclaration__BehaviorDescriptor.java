package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class StructDeclaration__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L, "NewLanguage.structure.StructDeclaration");

  public static final SMethod<Set<SNode>> getAllSuperTraits_id6ACCDiXcwvc = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAllSuperTraits").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6ACCDiXcwvc").build();
  public static final SMethod<List<SNode>> getMethodDeclarations_id2JUAheO2Fau = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getMethodDeclarations").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JUAheO2Fau").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getAllSuperTraits_id6ACCDiXcwvc, getMethodDeclarations_id2JUAheO2Fau);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Set<SNode> getAllSuperTraits_id6ACCDiXcwvc(@NotNull SNode __thisNode__) {
    return (Set<SNode>) TraitDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiXbsSp.invoke(SNodeOperations.asSConcept(CONCEPTS.TraitDeclaration$N5), SLinkOperations.collect(SLinkOperations.getChildren(__thisNode__, LINKS.traits$FwMg), LINKS.trait$AxyP));
  }
  /*package*/ static List<SNode> getMethodDeclarations_id2JUAheO2Fau(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(SLinkOperations.collectMany(StructDeclaration__BehaviorDescriptor.getAllSuperTraits_id6ACCDiXcwvc.invoke(__thisNode__), LINKS.methodDeclarations$ZsGT)).toListSequence();
  }

  /*package*/ StructDeclaration__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Set<SNode>) getAllSuperTraits_id6ACCDiXcwvc(node));
      case 1:
        return (T) ((List<SNode>) getMethodDeclarations_id2JUAheO2Fau(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TraitDeclaration$N5 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, "NewLanguage.structure.TraitDeclaration");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink traits$FwMg = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L, 0x69a8a294bd2eafb9L, "traits");
    /*package*/ static final SReferenceLink trait$AxyP = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L, 0x69a8a294bd25a4f9L, "trait");
    /*package*/ static final SContainmentLink methodDeclarations$ZsGT = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L, 0x2bfa9913b4017065L, "methodDeclarations");
  }
}
