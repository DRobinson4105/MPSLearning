package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class TryStatement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L, "NewLanguage.structure.TryStatement");

  public static final SMethod<Void> runB_id1lixMam2fw2 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("runB").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1lixMam2fw2").build(SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(runB_id1lixMam2fw2);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void runB_id1lixMam2fw2(@NotNull SNode __thisNode__, Frame frame, EvaluatorEnvironment env) {
    try {
      StatementBlock__BehaviorDescriptor.run_id1lixMam2gZ0.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.body$bWeP), new Frame(frame), env);
    } catch (StructException e) {
      for (SNode catchStatement : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.catchStatements$wKC$))) {
        if (e.struct.extendsTrait(SLinkOperations.getTarget(SLinkOperations.getTarget(catchStatement, LINKS.parameter$m$CX), LINKS.trait$WtoR))) {
          Frame childFrame = new Frame(frame);
          childFrame.declare(SLinkOperations.getTarget(catchStatement, LINKS.parameter$m$CX));
          childFrame.set(SLinkOperations.getTarget(catchStatement, LINKS.parameter$m$CX), e.struct);
          StatementBlock__BehaviorDescriptor.run_id1lixMam2gZ0.invoke(SLinkOperations.getTarget(catchStatement, LINKS.body$uIbS), childFrame, env);
          break;
        }
      }
    } finally {
      if ((SLinkOperations.getTarget(__thisNode__, LINKS.finallyStatement$Hqhs) != null)) {
        StatementBlock__BehaviorDescriptor.run_id1lixMam2gZ0.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.finallyStatement$Hqhs), LINKS.body$Cu3p), new Frame(frame), env);
      }
    }
  }

  /*package*/ TryStatement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        runB_id1lixMam2fw2(node, (Frame) parameters[0], (EvaluatorEnvironment) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink parameter$m$CX = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L, 0x2bfa9913b4214a5dL, "parameter");
    /*package*/ static final SContainmentLink body$uIbS = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L, 0x2bfa9913b41b2613L, "body");
    /*package*/ static final SReferenceLink trait$WtoR = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L, 0x2bfa9913b4214a24L, "trait");
    /*package*/ static final SContainmentLink catchStatements$wKC$ = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L, 0x2bfa9913b41b2626L, "catchStatements");
    /*package*/ static final SContainmentLink body$bWeP = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L, 0x2bfa9913b41b23e6L, "body");
    /*package*/ static final SContainmentLink finallyStatement$Hqhs = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L, 0x2bfa9913b42ac283L, "finallyStatement");
    /*package*/ static final SContainmentLink body$Cu3p = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e5L, 0x2bfa9913b41b26f2L, "body");
  }
}
