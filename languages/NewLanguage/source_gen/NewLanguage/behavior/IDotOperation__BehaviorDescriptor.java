package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;

public final class IDotOperation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL, "NewLanguage.structure.IDotOperation");

  public static final SMethod<Object> compute_id25KMk5ynPAQ = new SMethodBuilder<Object>(new SJavaCompoundTypeImpl(Object.class)).name("compute").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("25KMk5ynPAQ").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<Object> computeImpl_id2JUAheO3pz8 = new SMethodBuilder<Object>(new SJavaCompoundTypeImpl(Object.class)).name("computeImpl").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JUAheO3pz8").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<ExpressionResult> computeL_id25KMk5yq1jB = new SMethodBuilder<ExpressionResult>(new SJavaCompoundTypeImpl(ExpressionResult.class)).name("computeL").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("25KMk5yq1jB").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<ExpressionResult> computeLImpl_id2JUAheO3pzy = new SMethodBuilder<ExpressionResult>(new SJavaCompoundTypeImpl(ExpressionResult.class)).name("computeLImpl").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JUAheO3pzy").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Frame.class, ""), SMethodBuilder.createJavaParameter(EvaluatorEnvironment.class, ""));
  public static final SMethod<SNode> dotFromContext_id2JUAheNhVmb = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("dotFromContext").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JUAheNhVmb").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(compute_id25KMk5ynPAQ, computeImpl_id2JUAheO3pz8, computeL_id25KMk5yq1jB, computeLImpl_id2JUAheO3pzy, dotFromContext_id2JUAheNhVmb);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Object compute_id25KMk5ynPAQ(@NotNull SNode __thisNode__, SNode operand, Frame frame, EvaluatorEnvironment env) {
    env.increment();
    return IDotOperation__BehaviorDescriptor.computeImpl_id2JUAheO3pz8.invoke(__thisNode__, operand, frame, env);
  }
  /*package*/ static Object computeImpl_id2JUAheO3pz8(@NotNull SNode __thisNode__, SNode operand, Frame frame, EvaluatorEnvironment env) {
    return "COMPUTE NOT IMPLEMENTED";
  }
  /*package*/ static ExpressionResult computeL_id25KMk5yq1jB(@NotNull SNode __thisNode__, SNode operand, Frame frame, EvaluatorEnvironment env) {
    env.increment();
    return IDotOperation__BehaviorDescriptor.computeLImpl_id2JUAheO3pzy.invoke(__thisNode__, operand, frame, env);
  }
  /*package*/ static ExpressionResult computeLImpl_id2JUAheO3pzy(@NotNull SNode __thisNode__, SNode operand, Frame frame, EvaluatorEnvironment env) {
    final Object val = IDotOperation__BehaviorDescriptor.computeImpl_id2JUAheO3pz8.invoke(__thisNode__, operand, frame, env);
    return new ExpressionResult() {
      @Override
      public Object get() {
        return val;
      }

      @Override
      public void set(Object v) {
        throw new UnsupportedOperationException();
      }
    };
  }
  /*package*/ static SNode dotFromContext_id2JUAheNhVmb(@NotNull SAbstractConcept __thisConcept__, SNode contextNode) {
    return SNodeOperations.getNodeAncestor(contextNode, CONCEPTS.DotExpression$LX, true, false);
  }

  /*package*/ IDotOperation__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Object) compute_id25KMk5ynPAQ(node, (SNode) parameters[0], (Frame) parameters[1], (EvaluatorEnvironment) parameters[2]));
      case 1:
        return (T) ((Object) computeImpl_id2JUAheO3pz8(node, (SNode) parameters[0], (Frame) parameters[1], (EvaluatorEnvironment) parameters[2]));
      case 2:
        return (T) ((ExpressionResult) computeL_id25KMk5yq1jB(node, (SNode) parameters[0], (Frame) parameters[1], (EvaluatorEnvironment) parameters[2]));
      case 3:
        return (T) ((ExpressionResult) computeLImpl_id2JUAheO3pzy(node, (SNode) parameters[0], (Frame) parameters[1], (EvaluatorEnvironment) parameters[2]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 4:
        return (T) ((SNode) dotFromContext_id2JUAheNhVmb(concept, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DotExpression$LX = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6dL, "NewLanguage.structure.DotExpression");
  }
}
