package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBE_Assign = createDescriptorForBE_Assign();
  /*package*/ final ConceptDescriptor myConceptBE_Compute = createDescriptorForBE_Compute();
  /*package*/ final ConceptDescriptor myConceptBE_Divide = createDescriptorForBE_Divide();
  /*package*/ final ConceptDescriptor myConceptBE_DivideAssign = createDescriptorForBE_DivideAssign();
  /*package*/ final ConceptDescriptor myConceptBE_EqualTo = createDescriptorForBE_EqualTo();
  /*package*/ final ConceptDescriptor myConceptBE_GreaterThan = createDescriptorForBE_GreaterThan();
  /*package*/ final ConceptDescriptor myConceptBE_LessThan = createDescriptorForBE_LessThan();
  /*package*/ final ConceptDescriptor myConceptBE_Minus = createDescriptorForBE_Minus();
  /*package*/ final ConceptDescriptor myConceptBE_MinusAssign = createDescriptorForBE_MinusAssign();
  /*package*/ final ConceptDescriptor myConceptBE_ModifyAssign = createDescriptorForBE_ModifyAssign();
  /*package*/ final ConceptDescriptor myConceptBE_Multiply = createDescriptorForBE_Multiply();
  /*package*/ final ConceptDescriptor myConceptBE_MultiplyAssign = createDescriptorForBE_MultiplyAssign();
  /*package*/ final ConceptDescriptor myConceptBE_Plus = createDescriptorForBE_Plus();
  /*package*/ final ConceptDescriptor myConceptBE_PlusAssign = createDescriptorForBE_PlusAssign();
  /*package*/ final ConceptDescriptor myConceptBiExpression = createDescriptorForBiExpression();
  /*package*/ final ConceptDescriptor myConceptBoolType = createDescriptorForBoolType();
  /*package*/ final ConceptDescriptor myConceptBooleanLiteral = createDescriptorForBooleanLiteral();
  /*package*/ final ConceptDescriptor myConceptBreakStatement = createDescriptorForBreakStatement();
  /*package*/ final ConceptDescriptor myConceptCatchParameter = createDescriptorForCatchParameter();
  /*package*/ final ConceptDescriptor myConceptCatchStatement = createDescriptorForCatchStatement();
  /*package*/ final ConceptDescriptor myConceptClosureLiteral = createDescriptorForClosureLiteral();
  /*package*/ final ConceptDescriptor myConceptComment = createDescriptorForComment();
  /*package*/ final ConceptDescriptor myConceptContinueStatement = createDescriptorForContinueStatement();
  /*package*/ final ConceptDescriptor myConceptDataType = createDescriptorForDataType();
  /*package*/ final ConceptDescriptor myConceptDecrementAfter = createDescriptorForDecrementAfter();
  /*package*/ final ConceptDescriptor myConceptDecrementBefore = createDescriptorForDecrementBefore();
  /*package*/ final ConceptDescriptor myConceptDocument = createDescriptorForDocument();
  /*package*/ final ConceptDescriptor myConceptDotExpression = createDescriptorForDotExpression();
  /*package*/ final ConceptDescriptor myConceptDoubleLiteral = createDescriptorForDoubleLiteral();
  /*package*/ final ConceptDescriptor myConceptDoubleType = createDescriptorForDoubleType();
  /*package*/ final ConceptDescriptor myConceptElse = createDescriptorForElse();
  /*package*/ final ConceptDescriptor myConceptElseIf = createDescriptorForElseIf();
  /*package*/ final ConceptDescriptor myConceptElseStatement = createDescriptorForElseStatement();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionStatement = createDescriptorForExpressionStatement();
  /*package*/ final ConceptDescriptor myConceptField = createDescriptorForField();
  /*package*/ final ConceptDescriptor myConceptFieldAccessor = createDescriptorForFieldAccessor();
  /*package*/ final ConceptDescriptor myConceptFinallyStatement = createDescriptorForFinallyStatement();
  /*package*/ final ConceptDescriptor myConceptForLoop = createDescriptorForForLoop();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptFunctionCall = createDescriptorForFunctionCall();
  /*package*/ final ConceptDescriptor myConceptFunctionReference = createDescriptorForFunctionReference();
  /*package*/ final ConceptDescriptor myConceptFunctionType = createDescriptorForFunctionType();
  /*package*/ final ConceptDescriptor myConceptICallable = createDescriptorForICallable();
  /*package*/ final ConceptDescriptor myConceptICanBeLabelled = createDescriptorForICanBeLabelled();
  /*package*/ final ConceptDescriptor myConceptIDotOperation = createDescriptorForIDotOperation();
  /*package*/ final ConceptDescriptor myConceptIHasCondition = createDescriptorForIHasCondition();
  /*package*/ final ConceptDescriptor myConceptIHasMethods = createDescriptorForIHasMethods();
  /*package*/ final ConceptDescriptor myConceptIVariable = createDescriptorForIVariable();
  /*package*/ final ConceptDescriptor myConceptIfStatement = createDescriptorForIfStatement();
  /*package*/ final ConceptDescriptor myConceptIncrementAfter = createDescriptorForIncrementAfter();
  /*package*/ final ConceptDescriptor myConceptIncrementBefore = createDescriptorForIncrementBefore();
  /*package*/ final ConceptDescriptor myConceptIntType = createDescriptorForIntType();
  /*package*/ final ConceptDescriptor myConceptIntegerLiteral = createDescriptorForIntegerLiteral();
  /*package*/ final ConceptDescriptor myConceptLExpression = createDescriptorForLExpression();
  /*package*/ final ConceptDescriptor myConceptLabel = createDescriptorForLabel();
  /*package*/ final ConceptDescriptor myConceptListLiteral = createDescriptorForListLiteral();
  /*package*/ final ConceptDescriptor myConceptListType = createDescriptorForListType();
  /*package*/ final ConceptDescriptor myConceptMapLiteral = createDescriptorForMapLiteral();
  /*package*/ final ConceptDescriptor myConceptMapType = createDescriptorForMapType();
  /*package*/ final ConceptDescriptor myConceptMethodAccessor = createDescriptorForMethodAccessor();
  /*package*/ final ConceptDescriptor myConceptMethodDeclaration = createDescriptorForMethodDeclaration();
  /*package*/ final ConceptDescriptor myConceptMethodImplementation = createDescriptorForMethodImplementation();
  /*package*/ final ConceptDescriptor myConceptNestedBlock = createDescriptorForNestedBlock();
  /*package*/ final ConceptDescriptor myConceptNumType = createDescriptorForNumType();
  /*package*/ final ConceptDescriptor myConceptPair = createDescriptorForPair();
  /*package*/ final ConceptDescriptor myConceptParameter = createDescriptorForParameter();
  /*package*/ final ConceptDescriptor myConceptPrintStatement = createDescriptorForPrintStatement();
  /*package*/ final ConceptDescriptor myConceptReturnStatement = createDescriptorForReturnStatement();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptStatementBlock = createDescriptorForStatementBlock();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptStringType = createDescriptorForStringType();
  /*package*/ final ConceptDescriptor myConceptStructDeclaration = createDescriptorForStructDeclaration();
  /*package*/ final ConceptDescriptor myConceptStructLiteral = createDescriptorForStructLiteral();
  /*package*/ final ConceptDescriptor myConceptStructType = createDescriptorForStructType();
  /*package*/ final ConceptDescriptor myConceptTernary = createDescriptorForTernary();
  /*package*/ final ConceptDescriptor myConceptThisVar = createDescriptorForThisVar();
  /*package*/ final ConceptDescriptor myConceptThrowStatement = createDescriptorForThrowStatement();
  /*package*/ final ConceptDescriptor myConceptTraitDeclaration = createDescriptorForTraitDeclaration();
  /*package*/ final ConceptDescriptor myConceptTraitReference = createDescriptorForTraitReference();
  /*package*/ final ConceptDescriptor myConceptTraitType = createDescriptorForTraitType();
  /*package*/ final ConceptDescriptor myConceptTryStatement = createDescriptorForTryStatement();
  /*package*/ final ConceptDescriptor myConceptTypeCast = createDescriptorForTypeCast();
  /*package*/ final ConceptDescriptor myConceptUnaryOperator = createDescriptorForUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptValueAccess = createDescriptorForValueAccess();
  /*package*/ final ConceptDescriptor myConceptVarReference = createDescriptorForVarReference();
  /*package*/ final ConceptDescriptor myConceptVariableDeclaration = createDescriptorForVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptWhileLoop = createDescriptorForWhileLoop();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBE_Assign, myConceptBE_Compute, myConceptBE_Divide, myConceptBE_DivideAssign, myConceptBE_EqualTo, myConceptBE_GreaterThan, myConceptBE_LessThan, myConceptBE_Minus, myConceptBE_MinusAssign, myConceptBE_ModifyAssign, myConceptBE_Multiply, myConceptBE_MultiplyAssign, myConceptBE_Plus, myConceptBE_PlusAssign, myConceptBiExpression, myConceptBoolType, myConceptBooleanLiteral, myConceptBreakStatement, myConceptCatchParameter, myConceptCatchStatement, myConceptClosureLiteral, myConceptComment, myConceptContinueStatement, myConceptDataType, myConceptDecrementAfter, myConceptDecrementBefore, myConceptDocument, myConceptDotExpression, myConceptDoubleLiteral, myConceptDoubleType, myConceptElse, myConceptElseIf, myConceptElseStatement, myConceptExpression, myConceptExpressionStatement, myConceptField, myConceptFieldAccessor, myConceptFinallyStatement, myConceptForLoop, myConceptFunction, myConceptFunctionCall, myConceptFunctionReference, myConceptFunctionType, myConceptICallable, myConceptICanBeLabelled, myConceptIDotOperation, myConceptIHasCondition, myConceptIHasMethods, myConceptIVariable, myConceptIfStatement, myConceptIncrementAfter, myConceptIncrementBefore, myConceptIntType, myConceptIntegerLiteral, myConceptLExpression, myConceptLabel, myConceptListLiteral, myConceptListType, myConceptMapLiteral, myConceptMapType, myConceptMethodAccessor, myConceptMethodDeclaration, myConceptMethodImplementation, myConceptNestedBlock, myConceptNumType, myConceptPair, myConceptParameter, myConceptPrintStatement, myConceptReturnStatement, myConceptStatement, myConceptStatementBlock, myConceptStringLiteral, myConceptStringType, myConceptStructDeclaration, myConceptStructLiteral, myConceptStructType, myConceptTernary, myConceptThisVar, myConceptThrowStatement, myConceptTraitDeclaration, myConceptTraitReference, myConceptTraitType, myConceptTryStatement, myConceptTypeCast, myConceptUnaryOperator, myConceptValueAccess, myConceptVarReference, myConceptVariableDeclaration, myConceptWhileLoop);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BE_Assign:
        return myConceptBE_Assign;
      case LanguageConceptSwitch.BE_Compute:
        return myConceptBE_Compute;
      case LanguageConceptSwitch.BE_Divide:
        return myConceptBE_Divide;
      case LanguageConceptSwitch.BE_DivideAssign:
        return myConceptBE_DivideAssign;
      case LanguageConceptSwitch.BE_EqualTo:
        return myConceptBE_EqualTo;
      case LanguageConceptSwitch.BE_GreaterThan:
        return myConceptBE_GreaterThan;
      case LanguageConceptSwitch.BE_LessThan:
        return myConceptBE_LessThan;
      case LanguageConceptSwitch.BE_Minus:
        return myConceptBE_Minus;
      case LanguageConceptSwitch.BE_MinusAssign:
        return myConceptBE_MinusAssign;
      case LanguageConceptSwitch.BE_ModifyAssign:
        return myConceptBE_ModifyAssign;
      case LanguageConceptSwitch.BE_Multiply:
        return myConceptBE_Multiply;
      case LanguageConceptSwitch.BE_MultiplyAssign:
        return myConceptBE_MultiplyAssign;
      case LanguageConceptSwitch.BE_Plus:
        return myConceptBE_Plus;
      case LanguageConceptSwitch.BE_PlusAssign:
        return myConceptBE_PlusAssign;
      case LanguageConceptSwitch.BiExpression:
        return myConceptBiExpression;
      case LanguageConceptSwitch.BoolType:
        return myConceptBoolType;
      case LanguageConceptSwitch.BooleanLiteral:
        return myConceptBooleanLiteral;
      case LanguageConceptSwitch.BreakStatement:
        return myConceptBreakStatement;
      case LanguageConceptSwitch.CatchParameter:
        return myConceptCatchParameter;
      case LanguageConceptSwitch.CatchStatement:
        return myConceptCatchStatement;
      case LanguageConceptSwitch.ClosureLiteral:
        return myConceptClosureLiteral;
      case LanguageConceptSwitch.Comment:
        return myConceptComment;
      case LanguageConceptSwitch.ContinueStatement:
        return myConceptContinueStatement;
      case LanguageConceptSwitch.DataType:
        return myConceptDataType;
      case LanguageConceptSwitch.DecrementAfter:
        return myConceptDecrementAfter;
      case LanguageConceptSwitch.DecrementBefore:
        return myConceptDecrementBefore;
      case LanguageConceptSwitch.Document:
        return myConceptDocument;
      case LanguageConceptSwitch.DotExpression:
        return myConceptDotExpression;
      case LanguageConceptSwitch.DoubleLiteral:
        return myConceptDoubleLiteral;
      case LanguageConceptSwitch.DoubleType:
        return myConceptDoubleType;
      case LanguageConceptSwitch.Else:
        return myConceptElse;
      case LanguageConceptSwitch.ElseIf:
        return myConceptElseIf;
      case LanguageConceptSwitch.ElseStatement:
        return myConceptElseStatement;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionStatement:
        return myConceptExpressionStatement;
      case LanguageConceptSwitch.Field:
        return myConceptField;
      case LanguageConceptSwitch.FieldAccessor:
        return myConceptFieldAccessor;
      case LanguageConceptSwitch.FinallyStatement:
        return myConceptFinallyStatement;
      case LanguageConceptSwitch.ForLoop:
        return myConceptForLoop;
      case LanguageConceptSwitch.Function:
        return myConceptFunction;
      case LanguageConceptSwitch.FunctionCall:
        return myConceptFunctionCall;
      case LanguageConceptSwitch.FunctionReference:
        return myConceptFunctionReference;
      case LanguageConceptSwitch.FunctionType:
        return myConceptFunctionType;
      case LanguageConceptSwitch.ICallable:
        return myConceptICallable;
      case LanguageConceptSwitch.ICanBeLabelled:
        return myConceptICanBeLabelled;
      case LanguageConceptSwitch.IDotOperation:
        return myConceptIDotOperation;
      case LanguageConceptSwitch.IHasCondition:
        return myConceptIHasCondition;
      case LanguageConceptSwitch.IHasMethods:
        return myConceptIHasMethods;
      case LanguageConceptSwitch.IVariable:
        return myConceptIVariable;
      case LanguageConceptSwitch.IfStatement:
        return myConceptIfStatement;
      case LanguageConceptSwitch.IncrementAfter:
        return myConceptIncrementAfter;
      case LanguageConceptSwitch.IncrementBefore:
        return myConceptIncrementBefore;
      case LanguageConceptSwitch.IntType:
        return myConceptIntType;
      case LanguageConceptSwitch.IntegerLiteral:
        return myConceptIntegerLiteral;
      case LanguageConceptSwitch.LExpression:
        return myConceptLExpression;
      case LanguageConceptSwitch.Label:
        return myConceptLabel;
      case LanguageConceptSwitch.ListLiteral:
        return myConceptListLiteral;
      case LanguageConceptSwitch.ListType:
        return myConceptListType;
      case LanguageConceptSwitch.MapLiteral:
        return myConceptMapLiteral;
      case LanguageConceptSwitch.MapType:
        return myConceptMapType;
      case LanguageConceptSwitch.MethodAccessor:
        return myConceptMethodAccessor;
      case LanguageConceptSwitch.MethodDeclaration:
        return myConceptMethodDeclaration;
      case LanguageConceptSwitch.MethodImplementation:
        return myConceptMethodImplementation;
      case LanguageConceptSwitch.NestedBlock:
        return myConceptNestedBlock;
      case LanguageConceptSwitch.NumType:
        return myConceptNumType;
      case LanguageConceptSwitch.Pair:
        return myConceptPair;
      case LanguageConceptSwitch.Parameter:
        return myConceptParameter;
      case LanguageConceptSwitch.PrintStatement:
        return myConceptPrintStatement;
      case LanguageConceptSwitch.ReturnStatement:
        return myConceptReturnStatement;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.StatementBlock:
        return myConceptStatementBlock;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.StringType:
        return myConceptStringType;
      case LanguageConceptSwitch.StructDeclaration:
        return myConceptStructDeclaration;
      case LanguageConceptSwitch.StructLiteral:
        return myConceptStructLiteral;
      case LanguageConceptSwitch.StructType:
        return myConceptStructType;
      case LanguageConceptSwitch.Ternary:
        return myConceptTernary;
      case LanguageConceptSwitch.ThisVar:
        return myConceptThisVar;
      case LanguageConceptSwitch.ThrowStatement:
        return myConceptThrowStatement;
      case LanguageConceptSwitch.TraitDeclaration:
        return myConceptTraitDeclaration;
      case LanguageConceptSwitch.TraitReference:
        return myConceptTraitReference;
      case LanguageConceptSwitch.TraitType:
        return myConceptTraitType;
      case LanguageConceptSwitch.TryStatement:
        return myConceptTryStatement;
      case LanguageConceptSwitch.TypeCast:
        return myConceptTypeCast;
      case LanguageConceptSwitch.UnaryOperator:
        return myConceptUnaryOperator;
      case LanguageConceptSwitch.ValueAccess:
        return myConceptValueAccess;
      case LanguageConceptSwitch.VarReference:
        return myConceptVarReference;
      case LanguageConceptSwitch.VariableDeclaration:
        return myConceptVariableDeclaration;
      case LanguageConceptSwitch.WhileLoop:
        return myConceptWhileLoop;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBE_Assign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Assign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fbL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BiExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575771411195");
    b.version(3);
    b.alias("=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_Compute() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Compute", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.class_(false, true, false);
    // extends: NewLanguage.structure.BiExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575771411252");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_Divide() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Divide", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebdL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083313991357");
    b.version(3);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_DivideAssign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_DivideAssign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebfL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_ModifyAssign
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083313991359");
    b.version(3);
    b.alias("/=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_EqualTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_EqualTo", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556e14aL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397876042");
    b.version(3);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_GreaterThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_GreaterThan", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556d9b9L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397874105");
    b.version(3);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_LessThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_LessThan", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646554f88fL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397750927");
    b.version(3);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_Minus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Minus", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258b72e22L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575767141922");
    b.version(3);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_MinusAssign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_MinusAssign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ec0L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_ModifyAssign
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083313991360");
    b.version(3);
    b.alias("-=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_ModifyAssign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_ModifyAssign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL);
    b.class_(false, true, false);
    // extends: NewLanguage.structure.BE_Assign
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fbL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575771411196");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_Multiply() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Multiply", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebcL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083313991356");
    b.version(3);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_MultiplyAssign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_MultiplyAssign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebeL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_ModifyAssign
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083313991358");
    b.version(3);
    b.alias("*=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_Plus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_Plus", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465531231L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_Compute
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397626417");
    b.version(3);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBE_PlusAssign() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BE_PlusAssign", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258ded016L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.BE_ModifyAssign
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575769739286");
    b.version(3);
    b.alias("+=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBiExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BiExpression", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L);
    b.class_(false, true, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397714724");
    b.version(3);
    b.aggregate("left", 0x69a8a294c0675f0bL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929836683019").done();
    b.aggregate("right", 0x2f07de6465546b29L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767397714729").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoolType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BoolType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652aL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575762830634");
    b.version(3);
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BooleanLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652bL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575762830635");
    b.version(3);
    b.property("value", 0x2e549525875652cL).type(PrimitiveTypeId.BOOLEAN).origin("208653575762830636").done();
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBreakStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "BreakStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e6167L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575759225191");
    b.version(3);
    b.associate("label", 0x2bfa9913b364755fL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L).optional(true).origin("3169013597701698911").done();
    b.alias("break");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCatchParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "CatchParameter", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L);
    b.class_(false, false, false);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597714074145");
    b.version(3);
    b.associate("trait", 0x2bfa9913b4214a24L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L).optional(false).origin("3169013597714074148").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCatchStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "CatchStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597713671651");
    b.version(3);
    b.aggregate("body", 0x2bfa9913b41b2613L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3169013597713671699").done();
    b.aggregate("parameter", 0x2bfa9913b4214a5dL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L).optional(false).ordered(true).multiple(false).origin("3169013597714074205").done();
    b.alias("catch");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForClosureLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ClosureLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575778945443");
    b.version(3);
    b.aggregate("parameters", 0x2e54952596b49a4L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L).optional(true).ordered(true).multiple(true).origin("208653575778945444").done();
    b.aggregate("body", 0x2e54952596b49a6L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("208653575778945446").done();
    b.alias("{ -> }");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForComment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Comment", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c1a68b3bL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929857600315");
    b.version(3);
    b.property("message", 0x69a8a294c1a68b3cL).type(PrimitiveTypeId.STRING).origin("7613513929857600316").done();
    b.alias("//");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContinueStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ContinueStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e7ffeL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575759233022");
    b.version(3);
    b.associate("label", 0x2bfa9913b364c62aL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L).optional(true).origin("3169013597701719594").done();
    b.alias("continue");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DataType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.class_(false, true, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575760780734");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDecrementAfter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DecrementAfter", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf5L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.UnaryOperator
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575777876725");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDecrementBefore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DecrementBefore", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf6L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.UnaryOperator
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575777876726");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDocument() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Document", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c3a82aL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/6344042991476516906");
    b.version(3);
    b.aggregate("functions", 0x2170c94161f3caf0L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L).optional(true).ordered(true).multiple(true).origin("2409647083296639728").done();
    b.aggregate("traits", 0x2bfa9913b4032901L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L).optional(true).ordered(true).multiple(true).origin("3169013597712099585").done();
    b.aggregate("structs", 0x2bfa9913b354308aL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L).optional(true).ordered(true).multiple(true).origin("3169013597700632714").done();
    b.aggregate("block", 0x2170c9416154a38bL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("2409647083286209419").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DotExpression", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6dL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.LExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083302972269");
    b.version(3);
    b.aggregate("operand", 0x2170c94162546b6eL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("2409647083302972270").done();
    b.aggregate("operator", 0x2170c94162546b70L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL).optional(false).ordered(true).multiple(false).origin("2409647083302972272").done();
    b.alias(".");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DoubleLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a43c987fL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/4161913957864216703");
    b.version(3);
    b.property("value", 0x39c216b1a43c9880L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("4161913957864216704").done();
    b.alias("double");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "DoubleType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a430a0a3L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/4161913957863432355");
    b.version(3);
    b.alias("double");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Else", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b5732L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.ElseStatement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083314960178");
    b.version(3);
    b.aggregate("body", 0x2170c941630b5764L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("2409647083314960228").done();
    b.alias("else");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElseIf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ElseIf", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b672cL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.ElseStatement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083314964268");
    b.version(3);
    b.aggregate("body", 0x2170c941630c3482L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("2409647083315016834").done();
    b.aggregate("else", 0x2170c941630c36a2L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL).optional(true).ordered(true).multiple(false).origin("2409647083315017378").done();
    b.alias("else if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElseStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ElseStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL);
    b.class_(false, true, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083314960159");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Expression", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.class_(false, true, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767394299248");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ExpressionStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655f40f2L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767398424818");
    b.version(3);
    b.aggregate("expression", 0x2f07de64655f40f3L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767398424819").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForField() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Field", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416258b6a5L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083303253669");
    b.version(3);
    b.aggregate("type", 0x2170c9416258b6a8L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("2409647083303253672").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFieldAccessor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "FieldAccessor", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L);
    b.class_(false, false, false);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083303244185");
    b.version(3);
    b.associate("field", 0x2170c941625ad356L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416258b6a5L).optional(false).origin("2409647083303392086").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFinallyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "FinallyStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e5L);
    b.class_(false, false, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597713671653");
    b.version(3);
    b.aggregate("body", 0x2bfa9913b41b26f2L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3169013597713671922").done();
    b.alias("finally");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ForLoop", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083314352482");
    b.version(3);
    b.aggregate("initialization", 0x2170c94163021183L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L).optional(true).ordered(true).multiple(true).origin("2409647083314352515").done();
    b.aggregate("updates", 0x2170c94163021188L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(true).ordered(true).multiple(true).origin("2409647083314352520").done();
    b.aggregate("body", 0x2170c9416302118cL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("2409647083314352524").done();
    b.alias("for");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Function", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767395623539");
    b.version(3);
    b.aggregate("body", 0x2f07de646534827dL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3388921767395623549").done();
    b.aggregate("parameters", 0x2f07de646534827fL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L).optional(true).ordered(true).multiple(true).origin("3388921767395623551").done();
    b.aggregate("returnType", 0x2e549525893b8a0L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("208653575764818080").done();
    b.alias("function");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "FunctionCall", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465374cacL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767395806380");
    b.version(3);
    b.aggregate("arguments", 0x2f07de6465393d26L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(true).ordered(true).multiple(true).origin("3388921767395933478").done();
    b.aggregate("function", 0x62ec3338d1af0287L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7128128629349745287").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "FunctionReference", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7128128629349719438");
    b.version(3);
    b.associate("function", 0x62ec3338d1ae9d95L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L).optional(false).origin("7128128629349719445").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "FunctionType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083281605337");
    b.version(3);
    b.aggregate("parameterTypes", 0x2170c941610e62dcL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(true).ordered(true).multiple(true).origin("2409647083281605340").done();
    b.aggregate("returnType", 0x2170c941610e62deL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("2409647083281605342").done();
    b.alias("closure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForICallable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ICallable", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575778946622");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForICanBeLabelled() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ICanBeLabelled", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597702219467");
    b.version(3);
    b.aggregate("label", 0x2bfa9913b37aa7cdL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L).optional(true).ordered(true).multiple(false).origin("3169013597703153613").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDotOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IDotOperation", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL);
    b.interface_();
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083302972268");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIHasCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IHasCondition", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.interface_();
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929788983864");
    b.version(3);
    b.aggregate("condition", 0x69a8a294bd8f8a39L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929788983865").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIHasMethods() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IHasMethods", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bec93234L);
    b.interface_();
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929809539636");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IVariable", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397560529");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IfStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646545f01eL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767396765726");
    b.version(3);
    b.aggregate("body", 0x2f07de646545f021L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3388921767396765729").done();
    b.aggregate("else", 0x2170c941630cb311L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL).optional(true).ordered(true).multiple(false).origin("2409647083315049233").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIncrementAfter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IncrementAfter", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf3L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.UnaryOperator
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575777876723");
    b.version(3);
    b.alias("++");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIncrementBefore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IncrementBefore", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf4L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.UnaryOperator
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575777876724");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IntType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575760780744");
    b.version(3);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IntegerLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c5d77dL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/6344042991476660093");
    b.version(3);
    b.property("value", 0x580a917d12c5d77eL).type(PrimitiveTypeId.INTEGER).origin("6344042991476660094").done();
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "LExpression", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL);
    b.class_(false, true, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929834698012");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLabel() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Label", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597701662578");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForListLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ListLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575776928028");
    b.version(3);
    b.aggregate("elements", 0x2e54952594c811fL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(true).ordered(true).multiple(true).origin("208653575776928031").done();
    b.aggregate("eType", 0x69a8a294bf33cd1cL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(true).ordered(true).multiple(false).origin("7613513929816526108").done();
    b.alias("[]");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForListType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ListType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575762991063");
    b.version(3);
    b.aggregate("elementType", 0x2e549525877d7d8L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("208653575762991064").done();
    b.alias("list");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMapLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "MapLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a63L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929811364451");
    b.version(3);
    b.aggregate("pairs", 0x69a8a294beee9e82L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294beee9c2cL).optional(true).ordered(true).multiple(true).origin("7613513929811992194").done();
    b.aggregate("kType", 0x69a8a294bf8f195aL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(true).ordered(true).multiple(false).origin("7613513929822509402").done();
    b.aggregate("vType", 0x69a8a294bf8f195dL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(true).ordered(true).multiple(false).origin("7613513929822509405").done();
    b.alias("{ : }");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMapType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "MapType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a20L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929811364384");
    b.version(3);
    b.aggregate("keyType", 0x69a8a294bee50a21L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("7613513929811364385").done();
    b.aggregate("valueType", 0x69a8a294bee50a23L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("7613513929811364387").done();
    b.alias("map");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodAccessor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "MethodAccessor", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L);
    b.class_(false, false, false);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597712781273");
    b.version(3);
    b.associate("method", 0x2bfa9913b40de615L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L).optional(false).origin("3169013597712803349").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "MethodDeclaration", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929777744512");
    b.version(3);
    b.aggregate("parameters", 0x69a8a294bce40a81L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L).optional(true).ordered(true).multiple(true).origin("7613513929777744513").done();
    b.aggregate("returnType", 0x69a8a294bce40a83L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("7613513929777744515").done();
    b.alias("method");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodImplementation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "MethodImplementation", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929777749241");
    b.version(3);
    b.associate("funcDec", 0x69a8a294bce41cfaL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L).optional(false).origin("7613513929777749242").done();
    b.aggregate("body", 0x69a8a294bce41d7bL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("7613513929777749371").done();
    b.aggregate("thisVar", 0x69a8a294bddf5e60L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bdda8581L).optional(false).ordered(true).multiple(false).origin("7613513929794215520").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNestedBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "NestedBlock", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b38b9de4L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597704265188");
    b.version(3);
    b.aggregate("body", 0x2bfa9913b38b9de5L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3169013597704265189").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "NumType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c01651b0L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929831371184");
    b.version(3);
    b.alias("num");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPair() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Pair", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294beee9c2cL);
    b.class_(false, false, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929811991596");
    b.version(3);
    b.aggregate("key", 0x69a8a294beee9c2dL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929811991597").done();
    b.aggregate("value", 0x69a8a294beee9c2fL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929811991599").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Parameter", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L);
    b.class_(false, false, false);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767395623554");
    b.version(3);
    b.aggregate("type", 0x2e549525891ccd0L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("208653575764692176").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrintStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "PrintStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258470741L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575759791937");
    b.version(3);
    b.aggregate("message", 0x2170c94161c8a9daL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("2409647083293813210").done();
    b.alias("print");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReturnStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ReturnStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397137475");
    b.version(3);
    b.aggregate("expression", 0x2f07de64654b9c44L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767397137476").done();
    b.alias("return");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Statement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.class_(false, true, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767395214689");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatementBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StatementBlock", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767395214690");
    b.version(3);
    b.aggregate("statements", 0x2f07de64652e4563L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L).optional(true).ordered(true).multiple(true).origin("3388921767395214691").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StringLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952585666a8L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575760799400");
    b.version(3);
    b.property("value", 0x2e54952585666a9L).type(PrimitiveTypeId.STRING).origin("208653575760799401").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StringType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258565786L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575760795526");
    b.version(3);
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StructDeclaration", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083300175748");
    b.version(3);
    b.aggregate("fields", 0x2170c9416229bf85L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416258b6a5L).optional(true).ordered(true).multiple(true).origin("2409647083300175749").done();
    b.aggregate("methodImpls", 0x69a8a294bce57beeL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L).optional(true).ordered(true).multiple(true).origin("7613513929777839086").done();
    b.aggregate("traits", 0x69a8a294bd2eafb9L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L).optional(true).ordered(true).multiple(true).origin("7613513929782636473").done();
    b.alias("struct");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StructLiteral", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083301144900");
    b.version(3);
    b.associate("structDec", 0x2170c94162388960L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L).optional(false).origin("2409647083301144928").done();
    b.aggregate("arguments", 0x2170c94162388945L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(true).ordered(true).multiple(true).origin("2409647083301144901").done();
    b.alias("new");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "StructType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bec93234L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/2409647083300175745");
    b.version(3);
    b.associate("structDec", 0x2bfa9913b3474c5bL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L).optional(false).origin("3169013597699787867").done();
    b.alias("struct");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTernary() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Ternary", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465587e79L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767397981817");
    b.version(3);
    b.aggregate("ifTrue", 0x2f07de6465587e7cL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767397981820").done();
    b.aggregate("ifFalse", 0x2f07de6465587e7fL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767397981823").done();
    b.alias("?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThisVar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ThisVar", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bdda8581L);
    b.class_(false, false, false);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929793897857");
    b.version(3);
    b.alias("this");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThrowStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ThrowStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b423c5ceL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597714236878");
    b.version(3);
    b.aggregate("struct", 0x2bfa9913b423c5cfL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3169013597714236879").done();
    b.alias("throw");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTraitDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "TraitDeclaration", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597711986784");
    b.version(3);
    b.aggregate("methodDeclarations", 0x2bfa9913b4017065L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L).optional(true).ordered(true).multiple(true).origin("3169013597711986789").done();
    b.aggregate("parentTraits", 0x69a8a294bd25a500L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L).optional(true).ordered(true).multiple(true).origin("7613513929782043904").done();
    b.alias("trait");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTraitReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "TraitReference", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L);
    b.class_(false, false, false);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929782043896");
    b.version(3);
    b.associate("trait", 0x69a8a294bd25a4f9L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L).optional(false).origin("7613513929782043897").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTraitType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "TraitType", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.DataType
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bec93234L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597718626285");
    b.version(3);
    b.associate("traitDec", 0x2bfa9913b466bfeeL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L).optional(false).origin("3169013597718626286").done();
    b.alias("trait");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTryStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "TryStatement", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3169013597713671141");
    b.version(3);
    b.aggregate("body", 0x2bfa9913b41b23e6L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3169013597713671142").done();
    b.aggregate("catchStatements", 0x2bfa9913b41b2626L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L).optional(true).ordered(true).multiple(true).origin("3169013597713671718").done();
    b.aggregate("finallyStatement", 0x2bfa9913b42ac283L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e5L).optional(true).ordered(true).multiple(false).origin("3169013597714694787").done();
    b.alias("try");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypeCast() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "TypeCast", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a473fd97L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Expression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/4161913957867847063");
    b.version(3);
    b.aggregate("type", 0x39c216b1a473fd98L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL).optional(false).ordered(true).multiple(false).origin("4161913957867847064").done();
    b.aggregate("exp", 0x39c216b1a473fd9aL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("4161913957867847066").done();
    b.alias("(<type>) expr");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "UnaryOperator", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L);
    b.class_(false, true, false);
    // extends: NewLanguage.structure.LExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/208653575777876722");
    b.version(3);
    b.aggregate("exp", 0x2e54952595afafbL).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL).optional(false).ordered(true).multiple(false).origin("208653575777876731").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValueAccess() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "ValueAccess", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.LExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/7613513929812101414");
    b.version(3);
    b.aggregate("container", 0x69a8a294bef04927L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929812101415").done();
    b.aggregate("key", 0x69a8a294bef04929L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("7613513929812101417").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVarReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "VarReference", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.LExpression
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767394977683");
    b.version(3);
    b.associate("var", 0x2f07de64652aa794L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L).optional(false).origin("3388921767394977684").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "VariableDeclaration", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/6344042991476437935");
    b.version(3);
    b.aggregate("value", 0x2f07de6465257e52L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L).optional(false).ordered(true).multiple(false).origin("3388921767394639442").done();
    b.alias("var <name> = <init>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhileLoop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "WhileLoop", 0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465610090L);
    b.class_(false, false, false);
    // extends: NewLanguage.structure.Statement
    b.super_(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL);
    b.parent(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L);
    b.origin("r:1a359b01-6c7c-4105-ba93-a2467014847a(NewLanguage.structure)/3388921767398539408");
    b.version(3);
    b.aggregate("body", 0x2f07de6465610092L).target(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L).optional(false).ordered(true).multiple(false).origin("3388921767398539410").done();
    b.alias("while");
    return b.create();
  }
}
