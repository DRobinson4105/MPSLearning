package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BE_Assign;
  private ConceptPresentation props_BE_Compute;
  private ConceptPresentation props_BE_Divide;
  private ConceptPresentation props_BE_DivideAssign;
  private ConceptPresentation props_BE_EqualTo;
  private ConceptPresentation props_BE_GreaterThan;
  private ConceptPresentation props_BE_LessThan;
  private ConceptPresentation props_BE_Minus;
  private ConceptPresentation props_BE_MinusAssign;
  private ConceptPresentation props_BE_ModifyAssign;
  private ConceptPresentation props_BE_Multiply;
  private ConceptPresentation props_BE_MultiplyAssign;
  private ConceptPresentation props_BE_Plus;
  private ConceptPresentation props_BE_PlusAssign;
  private ConceptPresentation props_BiExpression;
  private ConceptPresentation props_BoolType;
  private ConceptPresentation props_BooleanLiteral;
  private ConceptPresentation props_BreakStatement;
  private ConceptPresentation props_CatchParameter;
  private ConceptPresentation props_CatchStatement;
  private ConceptPresentation props_ClosureLiteral;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_ContinueStatement;
  private ConceptPresentation props_DataType;
  private ConceptPresentation props_DecrementAfter;
  private ConceptPresentation props_DecrementBefore;
  private ConceptPresentation props_Document;
  private ConceptPresentation props_DotExpression;
  private ConceptPresentation props_DoubleLiteral;
  private ConceptPresentation props_DoubleType;
  private ConceptPresentation props_Else;
  private ConceptPresentation props_ElseIf;
  private ConceptPresentation props_ElseStatement;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_ExpressionStatement;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_FieldAccessor;
  private ConceptPresentation props_FinallyStatement;
  private ConceptPresentation props_ForLoop;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_FunctionCall;
  private ConceptPresentation props_FunctionReference;
  private ConceptPresentation props_FunctionType;
  private ConceptPresentation props_ICallable;
  private ConceptPresentation props_ICanBeLabelled;
  private ConceptPresentation props_IDotOperation;
  private ConceptPresentation props_IHasCondition;
  private ConceptPresentation props_IHasMethods;
  private ConceptPresentation props_IVariable;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_IncrementAfter;
  private ConceptPresentation props_IncrementBefore;
  private ConceptPresentation props_IntType;
  private ConceptPresentation props_IntegerLiteral;
  private ConceptPresentation props_LExpression;
  private ConceptPresentation props_Label;
  private ConceptPresentation props_ListLiteral;
  private ConceptPresentation props_ListType;
  private ConceptPresentation props_MapLiteral;
  private ConceptPresentation props_MapType;
  private ConceptPresentation props_MethodAccessor;
  private ConceptPresentation props_MethodDeclaration;
  private ConceptPresentation props_MethodImplementation;
  private ConceptPresentation props_NestedBlock;
  private ConceptPresentation props_NumType;
  private ConceptPresentation props_Pair;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_PrintStatement;
  private ConceptPresentation props_ReturnStatement;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StatementBlock;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_StringType;
  private ConceptPresentation props_StructDeclaration;
  private ConceptPresentation props_StructLiteral;
  private ConceptPresentation props_StructType;
  private ConceptPresentation props_Ternary;
  private ConceptPresentation props_ThisVar;
  private ConceptPresentation props_ThrowStatement;
  private ConceptPresentation props_TraitDeclaration;
  private ConceptPresentation props_TraitReference;
  private ConceptPresentation props_TraitType;
  private ConceptPresentation props_TryStatement;
  private ConceptPresentation props_TypeCast;
  private ConceptPresentation props_UnaryOperator;
  private ConceptPresentation props_ValueAccess;
  private ConceptPresentation props_VarReference;
  private ConceptPresentation props_VariableDeclaration;
  private ConceptPresentation props_WhileLoop;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BE_Assign:
        if (props_BE_Assign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_BE_Assign = cpb.create();
        }
        return props_BE_Assign;
      case LanguageConceptSwitch.BE_Compute:
        if (props_BE_Compute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BE_Compute = cpb.create();
        }
        return props_BE_Compute;
      case LanguageConceptSwitch.BE_Divide:
        if (props_BE_Divide == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/");
          props_BE_Divide = cpb.create();
        }
        return props_BE_Divide;
      case LanguageConceptSwitch.BE_DivideAssign:
        if (props_BE_DivideAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/=");
          props_BE_DivideAssign = cpb.create();
        }
        return props_BE_DivideAssign;
      case LanguageConceptSwitch.BE_EqualTo:
        if (props_BE_EqualTo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("==");
          props_BE_EqualTo = cpb.create();
        }
        return props_BE_EqualTo;
      case LanguageConceptSwitch.BE_GreaterThan:
        if (props_BE_GreaterThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_BE_GreaterThan = cpb.create();
        }
        return props_BE_GreaterThan;
      case LanguageConceptSwitch.BE_LessThan:
        if (props_BE_LessThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_BE_LessThan = cpb.create();
        }
        return props_BE_LessThan;
      case LanguageConceptSwitch.BE_Minus:
        if (props_BE_Minus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-");
          props_BE_Minus = cpb.create();
        }
        return props_BE_Minus;
      case LanguageConceptSwitch.BE_MinusAssign:
        if (props_BE_MinusAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-=");
          props_BE_MinusAssign = cpb.create();
        }
        return props_BE_MinusAssign;
      case LanguageConceptSwitch.BE_ModifyAssign:
        if (props_BE_ModifyAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BE_ModifyAssign = cpb.create();
        }
        return props_BE_ModifyAssign;
      case LanguageConceptSwitch.BE_Multiply:
        if (props_BE_Multiply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_BE_Multiply = cpb.create();
        }
        return props_BE_Multiply;
      case LanguageConceptSwitch.BE_MultiplyAssign:
        if (props_BE_MultiplyAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*=");
          props_BE_MultiplyAssign = cpb.create();
        }
        return props_BE_MultiplyAssign;
      case LanguageConceptSwitch.BE_Plus:
        if (props_BE_Plus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_BE_Plus = cpb.create();
        }
        return props_BE_Plus;
      case LanguageConceptSwitch.BE_PlusAssign:
        if (props_BE_PlusAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+=");
          props_BE_PlusAssign = cpb.create();
        }
        return props_BE_PlusAssign;
      case LanguageConceptSwitch.BiExpression:
        if (props_BiExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BiExpression = cpb.create();
        }
        return props_BiExpression;
      case LanguageConceptSwitch.BoolType:
        if (props_BoolType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bool");
          props_BoolType = cpb.create();
        }
        return props_BoolType;
      case LanguageConceptSwitch.BooleanLiteral:
        if (props_BooleanLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bool");
          props_BooleanLiteral = cpb.create();
        }
        return props_BooleanLiteral;
      case LanguageConceptSwitch.BreakStatement:
        if (props_BreakStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("break");
          props_BreakStatement = cpb.create();
        }
        return props_BreakStatement;
      case LanguageConceptSwitch.CatchParameter:
        if (props_CatchParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CatchParameter = cpb.create();
        }
        return props_CatchParameter;
      case LanguageConceptSwitch.CatchStatement:
        if (props_CatchStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("catch");
          props_CatchStatement = cpb.create();
        }
        return props_CatchStatement;
      case LanguageConceptSwitch.ClosureLiteral:
        if (props_ClosureLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClosureLiteral = cpb.create();
        }
        return props_ClosureLiteral;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.ContinueStatement:
        if (props_ContinueStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("continue");
          props_ContinueStatement = cpb.create();
        }
        return props_ContinueStatement;
      case LanguageConceptSwitch.DataType:
        if (props_DataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DataType = cpb.create();
        }
        return props_DataType;
      case LanguageConceptSwitch.DecrementAfter:
        if (props_DecrementAfter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DecrementAfter");
          props_DecrementAfter = cpb.create();
        }
        return props_DecrementAfter;
      case LanguageConceptSwitch.DecrementBefore:
        if (props_DecrementBefore == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DecrementBefore");
          props_DecrementBefore = cpb.create();
        }
        return props_DecrementBefore;
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.DotExpression:
        if (props_DotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(".");
          props_DotExpression = cpb.create();
        }
        return props_DotExpression;
      case LanguageConceptSwitch.DoubleLiteral:
        if (props_DoubleLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("double");
          props_DoubleLiteral = cpb.create();
        }
        return props_DoubleLiteral;
      case LanguageConceptSwitch.DoubleType:
        if (props_DoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("double");
          props_DoubleType = cpb.create();
        }
        return props_DoubleType;
      case LanguageConceptSwitch.Else:
        if (props_Else == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("else");
          props_Else = cpb.create();
        }
        return props_Else;
      case LanguageConceptSwitch.ElseIf:
        if (props_ElseIf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("else if");
          props_ElseIf = cpb.create();
        }
        return props_ElseIf;
      case LanguageConceptSwitch.ElseStatement:
        if (props_ElseStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ElseStatement = cpb.create();
        }
        return props_ElseStatement;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.ExpressionStatement:
        if (props_ExpressionStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExpressionStatement");
          props_ExpressionStatement = cpb.create();
        }
        return props_ExpressionStatement;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.FieldAccessor:
        if (props_FieldAccessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L, 0x2170c941625ad356L, "field", "", "");
          props_FieldAccessor = cpb.create();
        }
        return props_FieldAccessor;
      case LanguageConceptSwitch.FinallyStatement:
        if (props_FinallyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("finally");
          props_FinallyStatement = cpb.create();
        }
        return props_FinallyStatement;
      case LanguageConceptSwitch.ForLoop:
        if (props_ForLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("for");
          props_ForLoop = cpb.create();
        }
        return props_ForLoop;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.FunctionCall:
        if (props_FunctionCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FunctionCall");
          props_FunctionCall = cpb.create();
        }
        return props_FunctionCall;
      case LanguageConceptSwitch.FunctionReference:
        if (props_FunctionReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL, 0x62ec3338d1ae9d95L, "function", "", "");
          props_FunctionReference = cpb.create();
        }
        return props_FunctionReference;
      case LanguageConceptSwitch.FunctionType:
        if (props_FunctionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("closure");
          props_FunctionType = cpb.create();
        }
        return props_FunctionType;
      case LanguageConceptSwitch.ICallable:
        if (props_ICallable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICallable = cpb.create();
        }
        return props_ICallable;
      case LanguageConceptSwitch.ICanBeLabelled:
        if (props_ICanBeLabelled == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICanBeLabelled = cpb.create();
        }
        return props_ICanBeLabelled;
      case LanguageConceptSwitch.IDotOperation:
        if (props_IDotOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDotOperation = cpb.create();
        }
        return props_IDotOperation;
      case LanguageConceptSwitch.IHasCondition:
        if (props_IHasCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHasCondition = cpb.create();
        }
        return props_IHasCondition;
      case LanguageConceptSwitch.IHasMethods:
        if (props_IHasMethods == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHasMethods = cpb.create();
        }
        return props_IHasMethods;
      case LanguageConceptSwitch.IVariable:
        if (props_IVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariable = cpb.create();
        }
        return props_IVariable;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.IncrementAfter:
        if (props_IncrementAfter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("++");
          props_IncrementAfter = cpb.create();
        }
        return props_IncrementAfter;
      case LanguageConceptSwitch.IncrementBefore:
        if (props_IncrementBefore == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IncrementBefore");
          props_IncrementBefore = cpb.create();
        }
        return props_IncrementBefore;
      case LanguageConceptSwitch.IntType:
        if (props_IntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_IntType = cpb.create();
        }
        return props_IntType;
      case LanguageConceptSwitch.IntegerLiteral:
        if (props_IntegerLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_IntegerLiteral = cpb.create();
        }
        return props_IntegerLiteral;
      case LanguageConceptSwitch.LExpression:
        if (props_LExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LExpression = cpb.create();
        }
        return props_LExpression;
      case LanguageConceptSwitch.Label:
        if (props_Label == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Label = cpb.create();
        }
        return props_Label;
      case LanguageConceptSwitch.ListLiteral:
        if (props_ListLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("[]");
          props_ListLiteral = cpb.create();
        }
        return props_ListLiteral;
      case LanguageConceptSwitch.ListType:
        if (props_ListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("list");
          props_ListType = cpb.create();
        }
        return props_ListType;
      case LanguageConceptSwitch.MapLiteral:
        if (props_MapLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("{ : }");
          props_MapLiteral = cpb.create();
        }
        return props_MapLiteral;
      case LanguageConceptSwitch.MapType:
        if (props_MapType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("map");
          props_MapType = cpb.create();
        }
        return props_MapType;
      case LanguageConceptSwitch.MethodAccessor:
        if (props_MethodAccessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L, 0x2bfa9913b40de615L, "method", "", "");
          props_MethodAccessor = cpb.create();
        }
        return props_MethodAccessor;
      case LanguageConceptSwitch.MethodDeclaration:
        if (props_MethodDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MethodDeclaration = cpb.create();
        }
        return props_MethodDeclaration;
      case LanguageConceptSwitch.MethodImplementation:
        if (props_MethodImplementation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MethodImplementation = cpb.create();
        }
        return props_MethodImplementation;
      case LanguageConceptSwitch.NestedBlock:
        if (props_NestedBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NestedBlock");
          props_NestedBlock = cpb.create();
        }
        return props_NestedBlock;
      case LanguageConceptSwitch.NumType:
        if (props_NumType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("num");
          props_NumType = cpb.create();
        }
        return props_NumType;
      case LanguageConceptSwitch.Pair:
        if (props_Pair == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Pair");
          props_Pair = cpb.create();
        }
        return props_Pair;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.PrintStatement:
        if (props_PrintStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("print");
          props_PrintStatement = cpb.create();
        }
        return props_PrintStatement;
      case LanguageConceptSwitch.ReturnStatement:
        if (props_ReturnStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("return");
          props_ReturnStatement = cpb.create();
        }
        return props_ReturnStatement;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StatementBlock:
        if (props_StatementBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StatementBlock");
          props_StatementBlock = cpb.create();
        }
        return props_StatementBlock;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.StringType:
        if (props_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("string");
          props_StringType = cpb.create();
        }
        return props_StringType;
      case LanguageConceptSwitch.StructDeclaration:
        if (props_StructDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructDeclaration = cpb.create();
        }
        return props_StructDeclaration;
      case LanguageConceptSwitch.StructLiteral:
        if (props_StructLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L, 0x2170c94162388960L, "structDec", "", "");
          props_StructLiteral = cpb.create();
        }
        return props_StructLiteral;
      case LanguageConceptSwitch.StructType:
        if (props_StructType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("struct");
          props_StructType = cpb.create();
        }
        return props_StructType;
      case LanguageConceptSwitch.Ternary:
        if (props_Ternary == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("?");
          props_Ternary = cpb.create();
        }
        return props_Ternary;
      case LanguageConceptSwitch.ThisVar:
        if (props_ThisVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ThisVar = cpb.create();
        }
        return props_ThisVar;
      case LanguageConceptSwitch.ThrowStatement:
        if (props_ThrowStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("throw");
          props_ThrowStatement = cpb.create();
        }
        return props_ThrowStatement;
      case LanguageConceptSwitch.TraitDeclaration:
        if (props_TraitDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TraitDeclaration = cpb.create();
        }
        return props_TraitDeclaration;
      case LanguageConceptSwitch.TraitReference:
        if (props_TraitReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L, 0x69a8a294bd25a4f9L, "trait", "", "");
          props_TraitReference = cpb.create();
        }
        return props_TraitReference;
      case LanguageConceptSwitch.TraitType:
        if (props_TraitType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("trait");
          props_TraitType = cpb.create();
        }
        return props_TraitType;
      case LanguageConceptSwitch.TryStatement:
        if (props_TryStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("try");
          props_TryStatement = cpb.create();
        }
        return props_TryStatement;
      case LanguageConceptSwitch.TypeCast:
        if (props_TypeCast == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(<type>) expr");
          props_TypeCast = cpb.create();
        }
        return props_TypeCast;
      case LanguageConceptSwitch.UnaryOperator:
        if (props_UnaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_UnaryOperator = cpb.create();
        }
        return props_UnaryOperator;
      case LanguageConceptSwitch.ValueAccess:
        if (props_ValueAccess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ValueAccess");
          props_ValueAccess = cpb.create();
        }
        return props_ValueAccess;
      case LanguageConceptSwitch.VarReference:
        if (props_VarReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L, 0x2f07de64652aa794L, "var", "", "");
          props_VarReference = cpb.create();
        }
        return props_VarReference;
      case LanguageConceptSwitch.VariableDeclaration:
        if (props_VariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableDeclaration = cpb.create();
        }
        return props_VariableDeclaration;
      case LanguageConceptSwitch.WhileLoop:
        if (props_WhileLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("while");
          props_WhileLoop = cpb.create();
        }
        return props_WhileLoop;
    }
    return null;
  }
}
