package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BiExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BoolType_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BooleanLiteral_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BreakStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new CatchParameter_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new CatchStatement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ClosureLiteral_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Comment_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ContinueStatement_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new DecrementAfter_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new DecrementBefore_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Document_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new DotExpression_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new DoubleLiteral_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new DoubleType_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Else_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ElseIf_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ExpressionStatement_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Field_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new FieldAccessor_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new FinallyStatement_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ForLoop_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Function_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new FunctionCall_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new FunctionReference_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new FunctionType_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new IncrementAfter_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new IncrementBefore_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new IntType_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new IntegerLiteral_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new Label_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new ListLiteral_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new ListType_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new MapLiteral_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new MapType_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new MethodAccessor_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new MethodDeclaration_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new MethodImplementation_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new NestedBlock_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new NumType_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new Pair_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new PrintStatement_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new ReturnStatement_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new StatementBlock_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new StringType_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new StructDeclaration_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new StructLiteral_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new StructType_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new Ternary_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new ThisVar_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new ThrowStatement_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new TraitDeclaration_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new TraitReference_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new TraitType_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new TryStatement_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new TypeCast_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new ValueAccess_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new VarReference_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new VariableDeclaration_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new WhileLoop_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("NewLanguage.editor.DummyForGrammarCells".equals(editorComponentId)) {
      return Collections.singletonList(new DummyForGrammarCells());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Arrays.asList(new TransformationMenu[]{new IncludeBeforeAfterTransformations(), new template_GrammarCellsSideTransformationsMenu()});
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Assign());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Compute());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Divide());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_DivideAssign());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_EqualTo());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_GreaterThan());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_LessThan());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Minus());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_MinusAssign());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_ModifyAssign());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Multiply());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_MultiplyAssign());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_Plus());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BE_PlusAssign());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BiExpression());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BoolType());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BooleanLiteral());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BreakStatement());
      case 18:
        return Arrays.asList(new SubstituteMenu[]{new CatchParameter_SubstituteMenu(), new GrammarCellsSubstituteMenu_CatchParameter()});
      case 19:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_CatchStatement());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ClosureLiteral());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Comment());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ContinueStatement());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DataType());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DecrementAfter());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DecrementBefore());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Document());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DotExpression());
      case 28:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DoubleLiteral());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DoubleType());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Else());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ElseIf());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ElseStatement());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Expression());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ExpressionStatement());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Field());
      case 36:
        return Arrays.asList(new SubstituteMenu[]{new FieldAccessor_SubstituteMenu(), new GrammarCellsSubstituteMenu_FieldAccessor()});
      case 37:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FinallyStatement());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ForLoop());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Function());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FunctionCall());
      case 41:
        return Arrays.asList(new SubstituteMenu[]{new FunctionReference_SubstituteMenu(), new GrammarCellsSubstituteMenu_FunctionReference()});
      case 42:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FunctionType());
      case 43:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ICallable());
      case 44:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ICanBeLabelled());
      case 45:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDotOperation());
      case 46:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IHasCondition());
      case 47:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IHasMethods());
      case 48:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IVariable());
      case 49:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IfStatement());
      case 50:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IncrementAfter());
      case 51:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IncrementBefore());
      case 52:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IntType());
      case 53:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IntegerLiteral());
      case 54:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_LExpression());
      case 55:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Label());
      case 56:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ListLiteral());
      case 57:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ListType());
      case 58:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MapLiteral());
      case 59:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MapType());
      case 60:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_MethodAccessor(), new MethodAccessor_SubstituteMenu()});
      case 61:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_MethodDeclaration());
      case 62:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_MethodImplementation(), new MethodImplementation_SubstituteMenu()});
      case 63:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NestedBlock());
      case 64:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NumType());
      case 65:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Pair());
      case 66:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Parameter());
      case 67:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PrintStatement());
      case 68:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ReturnStatement());
      case 69:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Statement());
      case 70:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StatementBlock());
      case 71:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StringLiteral());
      case 72:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StringType());
      case 73:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StructDeclaration());
      case 74:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_StructLiteral(), new StructLiteral_SubstituteMenu()});
      case 75:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StructType());
      case 76:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Ternary());
      case 77:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ThisVar());
      case 78:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ThrowStatement());
      case 79:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TraitDeclaration());
      case 80:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_TraitReference(), new TraitReference_SubstituteMenu()});
      case 81:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TraitType());
      case 82:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TryStatement());
      case 83:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TypeCast());
      case 84:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_UnaryOperator());
      case 85:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ValueAccess());
      case 86:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_VarReference(), new VarReference_SubstituteMenu()});
      case 87:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_VariableDeclaration());
      case 88:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_WhileLoop());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e6167L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c1a68b3bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e7ffeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf6L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c3a82aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a43c987fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a430a0a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b5732L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b672cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655f40f2L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416258b6a5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465374cacL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646545f01eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c5d77dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a63L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a20L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b38b9de4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c01651b0L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294beee9c2cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258470741L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952585666a8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258565786L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465587e79L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bdda8581L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b423c5ceL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a473fd97L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465610090L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fbL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f85334L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebdL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebfL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556e14aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646556d9b9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646554f88fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258b72e22L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ec0L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebcL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162fc8ebeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465531231L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258ded016L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525875652bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e6167L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c1a68b3bL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e7ffeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf6L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c3a82aL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a43c987fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a430a0a3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b5732L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b672cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941630b571fL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465204d70L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655f40f2L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416258b6a5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b25e5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94163021162L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348273L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465374cacL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b36c66cbL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162546b6cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd8f8a38L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bec93234L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64655210d1L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de646545f01eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf3L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c5d77dL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c049151cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b363e772L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a63L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bee50a20L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b38b9de4L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c01651b0L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294beee9c2cL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465348282L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258470741L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4561L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652e4562L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952585666a8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258565786L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465587e79L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bdda8581L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b423c5ceL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4017060L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b41b23e5L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x39c216b1a473fd97L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952595afaf2L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bef04926L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x580a917d12c273afL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465610090L)).seal();
}
