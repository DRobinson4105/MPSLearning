package NewLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new BreakStatement_Constraints();
      case 1:
        return new CatchParameter_Constraints();
      case 2:
        return new ContinueStatement_Constraints();
      case 3:
        return new FieldAccessor_Constraints();
      case 4:
        return new FunctionReference_Constraints();
      case 5:
        return new MethodAccessor_Constraints();
      case 6:
        return new MethodDeclaration_Constraints();
      case 7:
        return new MethodImplementation_Constraints();
      case 8:
        return new StructLiteral_Constraints();
      case 9:
        return new ThisVar_Constraints();
      case 10:
        return new TraitReference_Constraints();
      case 11:
        return new VarReference_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e6167L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b4214a21L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952583e7ffeL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162589199L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x62ec3338d1ae9d8eL), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b40d8fd9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce40a80L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bce41cf9L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bdda8581L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294bd25a4f8L), MetaIdFactory.conceptId(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64652aa793L)).seal();
}
