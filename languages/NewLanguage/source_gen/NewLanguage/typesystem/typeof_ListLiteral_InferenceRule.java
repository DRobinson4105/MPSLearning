package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_ListLiteral_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ListLiteral_InferenceRule() {
  }
  public void applyRule(final SNode listLiteral, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode lt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L, "NewLanguage.structure.ListType"));
    final SNode etype_typevar_208653575777156896 = typeCheckingContext.createNewRuntimeTypesVariable();
    SLinkOperations.setTarget(lt, LINKS.elementType$L1ul, typeCheckingContext.getRepresentative(etype_typevar_208653575777156896));

    if ((SLinkOperations.getTarget(listLiteral, LINKS.eType$eGtN) != null)) {
      {
        SNode _nodeToCheck_1029348928467 = listLiteral;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "7613513929816534786", 0, null);
        typeCheckingContext.createEquation((SNode) SLinkOperations.getTarget(lt, LINKS.elementType$L1ul), (SNode) SLinkOperations.getTarget(listLiteral, LINKS.eType$eGtN), _info_12389875345);
      }
    }

    for (SNode element : ListSequence.fromList(SLinkOperations.getChildren(listLiteral, LINKS.elements$ZvoG))) {
      {
        SNode _nodeToCheck_1029348928467 = element;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575777615212", 0, null);
        typeCheckingContext.createGreaterThanInequality((SNode) SLinkOperations.getTarget(lt, LINKS.elementType$L1ul), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575777615219", true), false, true, _info_12389875345);
      }
    }

    {
      SNode _nodeToCheck_1029348928467 = listLiteral;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575777154131", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575777153284", true), (SNode) lt, _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ListLiteral$Jy;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementType$L1ul = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e549525877d7d7L, 0x2e549525877d7d8L, "elementType");
    /*package*/ static final SContainmentLink eType$eGtN = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL, 0x69a8a294bf33cd1cL, "eType");
    /*package*/ static final SContainmentLink elements$ZvoG = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL, 0x2e54952594c811fL, "elements");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ListLiteral$Jy = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952594c811cL, "NewLanguage.structure.ListLiteral");
  }
}
