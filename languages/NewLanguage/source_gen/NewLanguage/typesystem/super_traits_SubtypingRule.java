package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import NewLanguage.behavior.TraitDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class super_traits_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public super_traits_SubtypingRule() {
  }
  public List<SNode> getSubOrSuperTypes(SNode traitType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return (List<SNode>) TraitDeclaration__BehaviorDescriptor.getAllSuperTypes_id6ACCDiZifQ2.invoke(SLinkOperations.getTarget(traitType, LINKS.traitDec$KTwP));
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.TraitType$I_;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink traitDec$KTwP = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL, 0x2bfa9913b466bfeeL, "traitDec");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TraitType$I_ = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2bfa9913b466bfedL, "NewLanguage.structure.TraitType");
  }
}
