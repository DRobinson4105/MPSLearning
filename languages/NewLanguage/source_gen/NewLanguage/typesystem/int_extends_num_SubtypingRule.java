package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class int_extends_num_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public int_extends_num_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode intType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return createNumType_m8mb4y_a0a1();
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IntType$pQ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }
  private static SNode createNumType_m8mb4y_a0a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NumType$bE);
    return n0.getResult();
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept IntType$pQ = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dc8L, "NewLanguage.structure.IntType");
    /*package*/ static final SConcept NumType$bE = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x69a8a294c01651b0L, "NewLanguage.structure.NumType");
  }
}
