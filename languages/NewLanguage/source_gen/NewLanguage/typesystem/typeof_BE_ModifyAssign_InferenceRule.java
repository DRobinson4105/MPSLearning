package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import NewLanguage.behavior.MatcherInput;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import NewLanguage.behavior.Matcher;
import NewLanguage.behavior.BiFunctions;
import NewLanguage.behavior.BE_ModifyAssign__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_BE_ModifyAssign_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BE_ModifyAssign_InferenceRule() {
  }
  public boolean overrides(final SNode bE_ModifyAssign, IsApplicableStatus status) {
    return true;
  }
  public void applyRule(final SNode bE_ModifyAssign, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode node = bE_ModifyAssign;
    {
      final SNode leftType = typeCheckingContext.typeOf(SLinkOperations.getTarget(node, LINKS.left$sDis), "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771482063", true);
      typeCheckingContext.whenConcrete(leftType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.typeOf(SLinkOperations.getTarget(node, LINKS.right$jytp), "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771482057", true);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                MatcherInput inp = new MatcherInput(SLinkOperations.getTarget(node, LINKS.left$sDis), SNodeOperations.as(typeCheckingContext.getExpandedNode(leftType), CONCEPTS.DataType$aP), SLinkOperations.getTarget(node, LINKS.right$jytp), SNodeOperations.as(typeCheckingContext.getExpandedNode(rightType), CONCEPTS.DataType$aP));
                Matcher m = BiFunctions.getMatcher(BE_ModifyAssign__BehaviorDescriptor.implementingConcept_idb_il9oY5c9.invoke(SNodeOperations.asSConcept(SNodeOperations.getConcept(node))), inp);
                if (m == null) {
                  {
                    final MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "Specialization cannot be found for the provided types", "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771482040", null, errorTarget);
                  }
                } else {
                  m.typeRule(typeCheckingContext, node, inp);
                }
                {
                  SNode _nodeToCheck_1029348928467 = bE_ModifyAssign;
                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771490930", 0, null);
                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771490938", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(bE_ModifyAssign, LINKS.left$sDis), "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771490933", true), _info_12389875345);
                }
              }
            }, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771482008", false, false);
          }
        }
      }, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "208653575771482006", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BE_ModifyAssign$i4;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$sDis = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L, 0x69a8a294c0675f0bL, "left");
    /*package*/ static final SContainmentLink right$jytp = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de6465546b24L, 0x2f07de6465546b29L, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataType$aP = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258561dbeL, "NewLanguage.structure.DataType");
    /*package*/ static final SConcept BE_ModifyAssign$i4 = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e5495258f852fcL, "NewLanguage.structure.BE_ModifyAssign");
  }
}
