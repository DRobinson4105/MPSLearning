package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class typeof_ClosureLiteral_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ClosureLiteral_InferenceRule() {
  }
  public void applyRule(final SNode closureLiteral, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode ft = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L, "NewLanguage.structure.FunctionType"));

    for (SNode parameter : ListSequence.fromList(SLinkOperations.getChildren(closureLiteral, LINKS.parameters$sjHl))) {
      ListSequence.fromList(SLinkOperations.getChildren(ft, LINKS.parameterTypes$aRdG)).addElement(typeCheckingContext.typeOf(parameter, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083282187010", true));
    }

    final SNode rtype_typevar_2409647083281985304 = typeCheckingContext.createNewRuntimeTypesVariable();
    SLinkOperations.setTarget(ft, LINKS.returnType$aRFI, typeCheckingContext.getRepresentative(rtype_typevar_2409647083281985304));

    for (SNode ret : ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(closureLiteral, LINKS.body$skbn), CONCEPTS.ReturnStatement$AC, false, new SAbstractConcept[]{CONCEPTS.ICallable$5s}))) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(ret, LINKS.expression$XPyl);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083282046354", 0, null);
        typeCheckingContext.createGreaterThanInequality((SNode) SLinkOperations.getTarget(ft, LINKS.returnType$aRFI), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083282046431", true), false, true, _info_12389875345);
      }
    }

    {
      SNode _nodeToCheck_1029348928467 = closureLiteral;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083282064631", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083282063726", true), (SNode) ft, _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ClosureLiteral$yY;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink parameterTypes$aRdG = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L, 0x2170c941610e62dcL, "parameterTypes");
    /*package*/ static final SContainmentLink parameters$sjHl = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L, 0x2e54952596b49a4L, "parameters");
    /*package*/ static final SContainmentLink returnType$aRFI = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c941610e62d9L, 0x2170c941610e62deL, "returnType");
    /*package*/ static final SContainmentLink expression$XPyl = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L, 0x2f07de64654b9c44L, "expression");
    /*package*/ static final SContainmentLink body$skbn = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L, 0x2e54952596b49a6L, "body");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ReturnStatement$AC = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2f07de64654b9c43L, "NewLanguage.structure.ReturnStatement");
    /*package*/ static final SInterfaceConcept ICallable$5s = MetaAdapterFactory.getInterfaceConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b4e3eL, "NewLanguage.structure.ICallable");
    /*package*/ static final SConcept ClosureLiteral$yY = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2e54952596b49a3L, "NewLanguage.structure.ClosureLiteral");
  }
}
