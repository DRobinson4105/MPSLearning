package NewLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.Iterator;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_StructLiteral_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_StructLiteral_InferenceRule() {
  }
  public void applyRule(final SNode structLiteral, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      SNode _nodeToCheck_1029348928467 = structLiteral;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083300330394", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083300330051", true), (SNode) createStructType_a6c71t_a1a0c0a0b(SLinkOperations.getTarget(structLiteral, LINKS.structDec$1lPU)), _info_12389875345);
    }

    if (ListSequence.fromList(SLinkOperations.getChildren(structLiteral, LINKS.arguments$15DP)).count() != ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(structLiteral, LINKS.structDec$1lPU), LINKS.fields$lX8l)).count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(structLiteral, "Wrong number of parameters", "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083301865424", null, errorTarget);
      }
    } else {
      {
        Iterator<SNode> arg_it = ListSequence.fromList(SLinkOperations.getChildren(structLiteral, LINKS.arguments$15DP)).iterator();
        Iterator<SNode> param_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(structLiteral, LINKS.structDec$1lPU), LINKS.fields$lX8l)).iterator();
        SNode arg_var;
        SNode param_var;
        while (arg_it.hasNext() && param_it.hasNext()) {
          arg_var = arg_it.next();
          param_var = param_it.next();
          if (!(typeCheckingContext.isSingleTypeComputation())) {
            {
              SNode _nodeToCheck_1029348928467 = arg_var;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083302150618", 0, null);
              typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083302418180", true), (SNode) typeCheckingContext.typeOf(param_var, "r:03b63f59-a307-4616-ac93-9aa75e1634ad(NewLanguage.typesystem)", "2409647083302418407", true), true, _info_12389875345);
            }
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.StructLiteral$6R;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createStructType_a6c71t_a1a0c0a0b(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.StructType$On);
    n0.setReferenceTarget(LINKS.structDec$QCZG, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink structDec$1lPU = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L, 0x2170c94162388960L, "structDec");
    /*package*/ static final SContainmentLink fields$lX8l = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf84L, 0x2170c9416229bf85L, "fields");
    /*package*/ static final SContainmentLink arguments$15DP = MetaAdapterFactory.getContainmentLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L, 0x2170c94162388945L, "arguments");
    /*package*/ static final SReferenceLink structDec$QCZG = MetaAdapterFactory.getReferenceLink(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L, 0x2bfa9913b3474c5bL, "structDec");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StructLiteral$6R = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c94162388944L, "NewLanguage.structure.StructLiteral");
    /*package*/ static final SConcept StructType$On = MetaAdapterFactory.getConcept(0x80fd2975f5c34fe6L, 0xa787f3eac6fef3beL, 0x2170c9416229bf81L, "NewLanguage.structure.StructType");
  }
}
